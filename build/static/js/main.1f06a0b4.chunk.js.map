{"version":3,"sources":["views/main.vew.jsx","client/index.js","routes.js","views/new-game.vew.jsx","views/role-managing.view.jsx","views/game.view.jsx","stores/game.store.js","views/add-category.view.jsx","components/Category.jsx","views/categories/categories.view.jsx","views/rules.view.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MainView","props","className","mode","menuItems","map","item","to","path","name","id","getCategories","axios","get","then","data","body","saveCategory","category","a","categories","put","headers","uuid","e","console","error","routes","main","newGame","rules","roleManaging","game","addCategory","Option","Select","defaultSettings","playersCont","spyesCount","isTimerNeeded","timer","isFirstMemberChoiseNeeded","isRolesNeeded","isHelpQuestionsNeeded","NewGameView","gameSetting","usePromise","result","useState","gameSettings","setGameSettings","history","useHistory","handleChange","prop","value","isSubmitDisabled","useMemo","length","layout","onFinish","gameStore","setGameOptions","push","Item","label","min","defaultValue","onChange","disabled","checked","required","pathOr","selected","filter","includes","htmlType","Meta","Card","alterIsOpened","curry","property","isOpened","items","pipe","when","propEq","assoc","observer","gameOptions","toJS","options","log","locations","option","flat","location","Math","round","random","arrayShuffle","repeat","propOr","type","description","cards","setCards","toggleOpened","find","card","removeCard","useEffect","cardTheme","useCallback","classNames","onClick","title","GameView","useCountdownTimer","countdown","start","pause","isRunning","spyText","onExpire","floor","toString","padStart","PauseOutlined","CaretRightOutlined","CloseOutlined","GameStore","makeAutoObservable","this","spy","alterValue","AddCategoryView","setLocations","setCategory","handleChangeLocationName","event","target","removeLocation","api","message","success","isAddButtonDisabled","placeholder","size","style","paddingBottom","DeleteOutlined","margin","PlusOutlined","Category","header","place","editable","CategoriesView","React","setCategories","LeftOutlined","LoadingOutlined","fontSize","spin","RulesView","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f06a0b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainView = (props) => {\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <h1>Шпион</h1>\r\n      <ul mode=\"inline\" className=\"main-view\">\r\n        {props.menuItems.map((item) => (\r\n          <li key={item.id}>\r\n            <Link to={item.path}>{item.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nMainView.propTypes = {\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default MainView;\r\n","import axios from 'axios';\r\nimport uuid from 'uuid-random';\r\n\r\nconst getCategories = () => {\r\n  return axios\r\n    .get('https://api.jsonbin.io/b/6041088b0866664b1088ad64/latest')\r\n    .then(({ data }) => data.body);\r\n};\r\n\r\nconst saveCategory = async (category) => {\r\n  const { categories } = await getCategories();\r\n  try {\r\n    axios.put('https://api.jsonbin.io/b/6041088b0866664b1088ad64', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Bin-Versioning': false,\r\n      },\r\n      body: {\r\n        categories: [\r\n          ...categories,\r\n          {\r\n            id: uuid(),\r\n            ...category,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nexport { getCategories, saveCategory };\r\n","const routes = {\r\n  main: '/',\r\n  newGame: '/new-game',\r\n  rules: '/rules',\r\n  roleManaging: '/role-managing',\r\n  game: '/game',\r\n  addCategory: '/add-category',\r\n  categories: '/categories',\r\n};\r\n\r\nexport default routes;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Button, Select, InputNumber, Switch } from \"antd\";\r\nimport usePromise from \"react-use-promise\";\r\nimport { getCategories } from \"../client\";\r\nimport { pathOr } from \"ramda\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst defaultSettings = {\r\n  id: 1,\r\n  playersCont: 4,\r\n  spyesCount: 1,\r\n  isTimerNeeded: true,\r\n  timer: 5,\r\n  isFirstMemberChoiseNeeded: false,\r\n  isRolesNeeded: false,\r\n  categories: [],\r\n  isHelpQuestionsNeeded: false,\r\n};\r\n\r\nconst NewGameView = (props) => {\r\n  const [result] = usePromise(getCategories, []);\r\n  const [gameSettings, setGameSettings] = useState(defaultSettings);\r\n  const history = useHistory();\r\n  const setGame = (gameSetting) => () => {\r\n    props.gameStore.setGameOptions(gameSetting);\r\n    history.push(routes.roleManaging);\r\n  };\r\n  const handleChangeCategories = (categories) => (selected) => {\r\n    return setGameSettings(() => ({\r\n      ...gameSettings,\r\n      categories: categories.filter((category) =>\r\n        selected.includes(category.id)\r\n      ),\r\n    }));\r\n  };\r\n  const handleChange = (prop) => (value) => {\r\n    setGameSettings(() => ({\r\n      ...gameSettings,\r\n      [prop]: value,\r\n    }));\r\n  };\r\n\r\n  const isSubmitDisabled = useMemo(() => !gameSettings.categories.length, [\r\n    gameSettings.categories,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <h1>Новая игра</h1>\r\n      <Form layout=\"horizontal\" onFinish={setGame(gameSettings)}>\r\n        <Form.Item label=\"Игроков\">\r\n          <InputNumber\r\n            min={3}\r\n            defaultValue={gameSettings.playersCont}\r\n            onChange={handleChange(\"playersCont\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Шпионов\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.spyesCount}\r\n            onChange={handleChange(\"spyesCount\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Продолжительность игры\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.timer}\r\n            onChange={handleChange(\"timer\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать таймер\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isTimerNeeded}\r\n            onChange={handleChange(\"isTimerNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Выбор первого игрока\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isFirstMemberChoiseNeeded}\r\n            onChange={handleChange(\"isFirstMemberChoiseNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать роли\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isRolesNeeded}\r\n            onChange={handleChange(\"isRolesNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Категории\" required>\r\n          <Select\r\n            mode=\"multiple\"\r\n            onChange={handleChangeCategories(\r\n              pathOr([], [\"categories\"], result)\r\n            )}\r\n            className=\"new-game__selector\"\r\n          >\r\n            {pathOr([], [\"categories\"], result).map((category) => (\r\n              <Option key={category.id}>{category.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Подсказывать вопросы\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isHelpQuestionsNeeded}\r\n            onChange={handleChange(\"isHelpQuestionsNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            htmlType=\"submit\"\r\n            className=\"new-game__submit\"\r\n            disabled={isSubmitDisabled}\r\n          >\r\n            Начать игру\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nNewGameView.propTypes = {\r\n  categories: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default NewGameView;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card } from \"antd\";\r\nimport {\r\n  assoc,\r\n  curry,\r\n  find,\r\n  map,\r\n  pathOr,\r\n  pipe,\r\n  prop,\r\n  propEq,\r\n  propOr,\r\n  repeat,\r\n  when,\r\n} from \"ramda\";\r\nimport routes from \"../routes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react\";\r\nimport uuid from \"uuid-random\";\r\nimport { toJS } from \"mobx\";\r\nimport arrayShuffle from \"array-shuffle\";\r\nimport classNames from \"classnames\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst alterIsOpened = curry((property, isOpened, id, items) =>\r\n  pipe(map(when(propEq(\"id\", id), assoc(property, isOpened))))(items)\r\n);\r\n\r\nconst RoleManagingView = (props) => {\r\n  const gameOptions = toJS(props.gameStore.options);\r\n  console.log(gameOptions);\r\n  const locations = gameOptions.categories\r\n    .map((option) => option.locations)\r\n    .flat();\r\n\r\n  const randomLocationIndex = Math.round(Math.random() * locations.length - 1);\r\n\r\n  const location = locations[randomLocationIndex];\r\n  const [cards, setCards] = useState(\r\n    arrayShuffle([\r\n      ...repeat(null, gameOptions.playersCont - gameOptions.spyesCount).map(\r\n        () => {\r\n          return {\r\n            id: uuid(),\r\n            value: propOr(\"\", \"name\", location),\r\n            type: \"location\",\r\n            description: pathOr(\r\n              \"Default description\",\r\n              [\"description\", \"location\"],\r\n              gameOptions\r\n            ),\r\n            isOpened: false,\r\n          };\r\n        }\r\n      ),\r\n      ...repeat(null, gameOptions.spyesCount).map(() => ({\r\n        id: uuid(),\r\n        type: \"spy\",\r\n        description: pathOr(\r\n          \"Default description\",\r\n          [\"description\", \"spy\"],\r\n          gameOptions\r\n        ),\r\n        isOpened: false,\r\n      })),\r\n    ])\r\n  );\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    toggleOpened(id);\r\n  };\r\n  const removeCard = (id) => {\r\n    return cards.filter((card) => card.id !== id);\r\n  };\r\n  const toggleOpened = (id) => {\r\n    if (pipe(find(propEq(\"id\", id)), prop(\"isOpened\"))(cards)) {\r\n      return setCards(() => removeCard(id));\r\n    }\r\n    return setCards(() =>\r\n      alterIsOpened(\r\n        \"isOpened\",\r\n        !cards.find((card) => card.id === id).isOpened,\r\n        id,\r\n        cards\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cards.length) {\r\n      history.push(routes.game);\r\n    }\r\n  }, [cards]);\r\n\r\n  const cardTheme = useCallback(\r\n    (isOpened) =>\r\n      classNames(\r\n        \"role-managing__card\",\r\n        isOpened ? \"role-managing__card--opened\" : \"\",\r\n        \"card\"\r\n      ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {cards.map((card) => {\r\n        console.log(card);\r\n        return (\r\n          <Card\r\n            key={card.id}\r\n            onClick={() => handleClick(card.id)}\r\n            className={cardTheme(card.isOpened)}\r\n          >\r\n            {card.isOpened ? (\r\n              <Meta\r\n                title={card.type === \"location\" ? card.value : \"Вы шпион\"}\r\n                description={card.description}\r\n                className=\"role-managing__meta\"\r\n              />\r\n            ) : (\r\n              \"Посмотри, что внутри\"\r\n            )}\r\n          </Card>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nRoleManagingView.propTypes = {\r\n  cards: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default observer(RoleManagingView);\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { addMinutes, format, startOfHour, startOfMinute } from \"date-fns\";\r\nimport { useCountdownTimer } from \"use-countdown-timer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { PropTypes } from \"mobx-react\";\r\nimport { toJS } from \"mobx\";\r\nimport {\r\n  PauseOutlined,\r\n  CaretRightOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst GameView = (props) => {\r\n  const gameStore = props.gameStore.options;\r\n  const { countdown, start, pause, isRunning, onExpire } = useCountdownTimer({\r\n    timer: 1000 * 60 * toJS(gameStore.timer),\r\n  });\r\n  const spyText =\r\n    gameStore.spyesCount > 1 ? \"Выиграли шпионы\" : \"Выиграл шпион\";\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <span className=\"game__counter\">\r\n        {Math.floor((countdown % 36e5) / 6e4)\r\n          .toString()\r\n          .padStart(2, \"0\")}{\" \"}\r\n        :{\" \"}\r\n        {Math.floor((countdown % 6e4) / 1000)\r\n          .toString()\r\n          .padStart(2, \"0\")}\r\n      </span>\r\n      <div className=\"game__controls\">\r\n        <div>\r\n          {isRunning ? (\r\n            <Button onClick={pause} className=\"btn-shadowed btn-small\">\r\n              <PauseOutlined />\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={start} className=\"btn-shadowed btn-small\">\r\n              <CaretRightOutlined />\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <Button className=\"btn-shadowed btn-small\">\r\n            <Link to={routes.main}>\r\n              <CloseOutlined />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"game__result\">\r\n        <Button className=\"btn-error btn-small\">{spyText}</Button>\r\n        <Button className=\"btn-small\">Выиграли мирные</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameView.propTypes = {\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default GameView;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass GameStore {\r\n  options = {\r\n    id: 1,\r\n    playersCont: 4,\r\n    spyesCount: 1,\r\n    isTimerNeeded: true,\r\n    timer: 5,\r\n    isFirstMemberChoiseNeeded: false,\r\n    isRolesNeeded: false,\r\n    categories: [],\r\n    isHelpQuestionsNeeded: false,\r\n  };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setGameOptions(gameOptions) {\r\n    this.options = {\r\n      ...gameOptions,\r\n      description: {\r\n        location:\r\n          \"Вы мирный житель. Ваша цель - вычислить шпиона и убрать его путем голосования\",\r\n        spy:\r\n          \"Вы шпион. Ваша цель - угадать локацию или не дать понять другим участникам, что вы ее не знаете\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport default GameStore;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { Form, Button, Input, message } from \"antd\";\r\nimport uuid from \"uuid-random\";\r\nimport { assoc, curry, map, pipe, propEq, when } from \"ramda\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport * as api from \"../client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nconst alterValue = curry((property, value, id, items) =>\r\n  pipe(map(when(propEq(\"id\", id), assoc(property, value))))(items)\r\n);\r\n\r\nconst AddCategoryView = () => {\r\n  const [locations, setLocations] = useState([{ id: uuid(), name: \"\" }]);\r\n  const [category, setCategory] = useState({ name: \"\" });\r\n\r\n  const addLocation = () =>\r\n    setLocations([...locations, { id: uuid(), name: \"\" }]);\r\n\r\n  const handleChangeName = (event) =>\r\n    setCategory({\r\n      name: event.target.value,\r\n    });\r\n  const handleChangeLocationName = (id) => (event) => {\r\n    setLocations(alterValue(\"name\", event.target.value, id, locations));\r\n  };\r\n\r\n  const removeLocation = (id) => () =>\r\n    setLocations(locations.filter((location) => location.id !== id));\r\n\r\n  const saveCategory = async () => {\r\n    try {\r\n      await api.saveCategory({ name: category.name, locations });\r\n      message.success(\"Категория успешно добавлена\");\r\n    } catch (e) {\r\n      console.error(\"Error is\", e);\r\n      message.error(\"Категория не добавлена\");\r\n    }\r\n  };\r\n\r\n  const isAddButtonDisabled = useMemo(\r\n    () => !category.name || !locations.find((location) => location.name),\r\n    [name, locations]\r\n  );\r\n  return (\r\n    <Form layout=\"vertical\" onFinish={saveCategory}>\r\n      <Form.Item>\r\n        <Input\r\n          onChange={handleChangeName}\r\n          placeholder=\"Название\"\r\n          size=\"large\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Локации\" className=\"df fdc\">\r\n        {locations.map(({ id, name }) => (\r\n          <div className=\"df\" key={id} style={{ paddingBottom: 3 }}>\r\n            <Input onChange={handleChangeLocationName(id)} value={name} />\r\n            {locations.length > 1 && (\r\n              <Button\r\n                size=\"small\"\r\n                onClick={removeLocation(id)}\r\n                className=\"btn-xsmall\"\r\n              >\r\n                <DeleteOutlined />\r\n              </Button>\r\n            )}\r\n          </div>\r\n        ))}\r\n        <Button\r\n          type=\"link\"\r\n          onClick={addLocation}\r\n          className=\"btn-xsmall\"\r\n          style={{ margin: \"0 auto\" }}\r\n        >\r\n          <PlusOutlined />\r\n        </Button>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button\r\n          htmlType=\"submit\"\r\n          className=\"btn-small\"\r\n          disabled={isAddButtonDisabled}\r\n        >\r\n          Добавить категорию\r\n        </Button>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"text\" className=\"btn-small\">\r\n          <Link to={routes.main}>Назад</Link>\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCategoryView;\r\n","import { Divider, List } from 'antd';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport { PropTypes } from 'mobx-react';\r\nimport * as React from 'react';\r\n\r\nexport const Category = (props) => {\r\n  const { locations, name, } = props;\r\n  return (\r\n    <div className=\"category\">\r\n      <List header={<Divider>{name}</Divider>}>\r\n        {locations.map((place) => (\r\n          <List.Item key={place.id}>\r\n            <Paragraph editable={{ onChange: console.log, }}>\r\n              {place.name}\r\n            </Paragraph>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nCategory.propTypes = {\r\n  locations: PropTypes.array,\r\n  name: PropTypes.string,\r\n};\r\n","import { LeftOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Button, List } from \"antd\";\r\nimport * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCategories } from \"../../client\";\r\nimport { Category } from \"../../components/Category\";\r\nimport routes from \"../../routes\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const CategoriesView = () => {\r\n  const [categories, setCategories] = React.useState([]);\r\n  React.useEffect(async () => {\r\n    const { categories } = await getCategories();\r\n    setCategories(categories);\r\n  }, []);\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <div className=\"df aic jcsb\">\r\n        <Button type=\"link\" className=\"btn-shadowed\">\r\n          <Link to={routes.main}>\r\n            <LeftOutlined />\r\n          </Link>\r\n        </Button>\r\n        <h1 className=\"categories__heading\">Список категорий</h1>\r\n      </div>\r\n      <List className=\"categories__list\">\r\n        {categories.length ? (\r\n          categories.map((category) => (\r\n            <List.Item key={category.id}>\r\n              <Category {...category} />\r\n            </List.Item>\r\n          ))\r\n        ) : (\r\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n        )}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\nexport const RulesView = () => (\r\n  <div>\r\n    <Button type=\"link\" className=\"btn-shadowed\">\r\n      <Link to={routes.main}>\r\n        <LeftOutlined />\r\n      </Link>\r\n    </Button>\r\n    <div className=\"df fdc aifs\">\r\n      <h1>Правила</h1>\r\n      <h2>Шпион</h2>\r\n      <p>\r\n        Приложение - это настольная пати-гейм игра. Есть несколько портов на\r\n        мобильные платформы, мне хочется сделать свой с некоторыми отличиями.\r\n      </p>\r\n      <h2>Суть игры</h2>\r\n      <p>\r\n        Придумывается локация, все участники кроме шпиона знают о ней. Задача\r\n        шпиона: угадать локацию и назвать ее, либо сделать все возможное, чтобы\r\n        его не обнаружили. Более подробные правила с примером сыгранной игры\r\n        можно посмотреть здесь:\r\n        https://www.1c-interes.ru/download_files/Rules_of_the_game/SW_spyfall_rules.pdf\r\n      </p>\r\n      <h2>Экраны</h2>\r\n      <p>\r\n        Все экраны должны содержать меню в виде панели снизу, если не указано\r\n        иное. Пример желаемой панели я также прикреплю, можно использовать прям\r\n        ее.\r\n      </p>\r\n      <h2>Профиль</h2>\r\n      <p>\r\n        Здесь будет аватарка, никнейм, место в топе (Насколько категории данного\r\n        игрока популярны среди других пользователей), список последних 5\r\n        созданных категорий с кнопкой перехода на полный список категорий.\r\n      </p>\r\n      <h2>Главный экран</h2>\r\n      <p>На главном экране необходимо отобразить логотип игры.</p>\r\n      <h2>Новая игра</h2>\r\n      <p>\r\n        Экран новой игры должен содержать форму с выбором настроек игры. В них\r\n        входит:\r\n      </p>\r\n      <ul>\r\n        <li>Количество игроков input</li>\r\n        <li>Количество шпионов input</li>\r\n        <li>Нужен ли таймер checkbox</li>\r\n        <li>Таймер(минуты) input</li>\r\n        <li>\r\n          Позволить игре выбрать первого человека, который задает вопрос\r\n          checkbox\r\n        </li>\r\n        <li>Нужны ли роли (локация может не содержать ролей) checkbox</li>\r\n        <li>Выбор категорий multiselect</li>\r\n        <li>Подсказывать вопросы checkbox</li>\r\n        <li>Шпионы знают друг друга checkbox</li>\r\n      </ul>\r\n      <p>\r\n        Часть настроек необходимо скрыть в подраздел \"Расширенные настройки\", а\r\n        именно:\r\n      </p>\r\n      <ul>\r\n        <li>Выбор первого игрока</li>\r\n        <li>Подсказки</li>\r\n        <li>Шпионы знают друг друга</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport MainView from \"./views/main.vew\";\r\nimport NewGameView from \"./views/new-game.vew\";\r\nimport RoleManagingView from \"./views/role-managing.view\";\r\nimport routes from \"./routes\";\r\nimport GameView from \"./views/game.view\";\r\nimport GameStore from \"./stores/game.store\";\r\nimport AddCategoryView from \"./views/add-category.view\";\r\nimport { CategoriesView } from \"./views/categories/categories.view\";\r\nimport { RulesView } from \"./views/rules.view\";\r\n\r\nconst gameStore = new GameStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={routes.main}>\r\n            <MainView\r\n              menuItems={[\r\n                { id: 1, name: \"Новая игра\", path: routes.newGame },\r\n                { id: 2, name: \"Правила\", path: routes.rules },\r\n                {\r\n                  id: 3,\r\n                  name: \"Добавить новую категорию\",\r\n                  path: routes.addCategory,\r\n                },\r\n                {\r\n                  id: 4,\r\n                  name: \"Список категорий\",\r\n                  path: routes.categories,\r\n                },\r\n              ]}\r\n            />\r\n          </Route>\r\n          <Route exact path={routes.newGame}>\r\n            <NewGameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.roleManaging}>\r\n            <RoleManagingView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.game}>\r\n            <GameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.addCategory}>\r\n            <AddCategoryView />\r\n          </Route>\r\n          <Route exact path={routes.rules}>\r\n            <RulesView />\r\n          </Route>\r\n          <Route exact path={routes.categories}>\r\n            <CategoriesView />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}