{"version":3,"sources":["views/main.vew.jsx","client/index.js","routes.js","views/new-game.vew.jsx","views/role-managing.view.jsx","views/game.view.jsx","stores/game.store.js","views/add-category.view.jsx","components/Category.jsx","views/categories/categories.view.jsx","views/rules.view.jsx","views/winner.view.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MainView","props","className","mode","menuItems","map","item","to","path","name","id","getCategories","axios","get","then","data","body","saveCategory","category","a","categories","put","headers","uuid","e","console","error","routes","main","newGame","rules","roleManaging","game","addCategory","winner","Option","Select","defaultSettings","playersCont","spyesCount","isTimerNeeded","timer","isFirstMemberChoiseNeeded","isRolesNeeded","isHelpQuestionsNeeded","NewGameView","gameSetting","usePromise","result","useState","gameSettings","setGameSettings","history","useHistory","handleChange","prop","value","isSubmitDisabled","useMemo","length","type","LeftOutlined","layout","onFinish","gameStore","setGameOptions","push","Item","label","min","defaultValue","onChange","disabled","checked","required","pathOr","selected","filter","includes","htmlType","Meta","Card","alterIsOpened","curry","property","isOpened","items","pipe","when","propEq","assoc","observer","gameOptions","toJS","options","log","locations","option","flat","Math","round","random","randomLocationIndex","location","useEffect","setLocation","arrayShuffle","repeat","propOr","description","cards","setCards","toggleOpened","find","card","removeCard","cardTheme","useCallback","classNames","index","onClick","style","left","top","title","GameView","useCountdownTimer","countdown","start","pause","isRunning","onExpire","setWinnerSpy","setWinner","setWinnerPeople","spyText","floor","toString","padStart","PauseOutlined","CaretRightOutlined","CloseOutlined","GameStore","makeAutoObservable","this","spy","alterValue","AddCategoryView","setLocations","setCategory","handleChangeLocationName","event","target","removeLocation","api","message","success","isAddButtonDisabled","placeholder","size","paddingBottom","DeleteOutlined","margin","PlusOutlined","Category","header","place","editable","CategoriesView","React","setCategories","LoadingOutlined","fontSize","spin","RulesView","href","WinnerView","moveToMain","SpyWinner","PeopleWinner","side","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e532f95.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainView = (props) => {\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <h1>Шпион</h1>\r\n      <ul mode=\"inline\" className=\"main-view\">\r\n        {props.menuItems.map((item) => (\r\n          <li key={item.id}>\r\n            <Link to={item.path}>{item.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nMainView.propTypes = {\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default MainView;\r\n","import axios from 'axios';\r\nimport uuid from 'uuid-random';\r\n\r\nconst getCategories = () => {\r\n  return axios\r\n    .get('https://api.jsonbin.io/b/6041088b0866664b1088ad64/latest')\r\n    .then(({ data }) => data.body);\r\n};\r\n\r\nconst saveCategory = async (category) => {\r\n  const { categories } = await getCategories();\r\n  try {\r\n    axios.put('https://api.jsonbin.io/b/6041088b0866664b1088ad64', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Bin-Versioning': false,\r\n      },\r\n      body: {\r\n        categories: [\r\n          ...categories,\r\n          {\r\n            id: uuid(),\r\n            ...category,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nexport { getCategories, saveCategory };\r\n","const routes = {\r\n  main: \"/\",\r\n  newGame: \"/new-game\",\r\n  rules: \"/rules\",\r\n  roleManaging: \"/role-managing\",\r\n  game: \"/game\",\r\n  addCategory: \"/add-category\",\r\n  categories: \"/categories\",\r\n  winner: \"/winner\",\r\n};\r\n\r\nexport default routes;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Button, Select, InputNumber, Switch } from \"antd\";\r\nimport usePromise from \"react-use-promise\";\r\nimport { getCategories } from \"../client\";\r\nimport { pathOr } from \"ramda\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst defaultSettings = {\r\n  id: 1,\r\n  playersCont: 4,\r\n  spyesCount: 1,\r\n  isTimerNeeded: true,\r\n  timer: 5,\r\n  isFirstMemberChoiseNeeded: false,\r\n  isRolesNeeded: false,\r\n  categories: [],\r\n  isHelpQuestionsNeeded: false,\r\n};\r\n\r\nconst NewGameView = (props) => {\r\n  const [result] = usePromise(getCategories, []);\r\n  const [gameSettings, setGameSettings] = useState(defaultSettings);\r\n  const history = useHistory();\r\n  const setGame = (gameSetting) => () => {\r\n    props.gameStore.setGameOptions(gameSetting);\r\n    history.push(routes.roleManaging);\r\n  };\r\n  const handleChangeCategories = (categories) => (selected) => {\r\n    return setGameSettings(() => ({\r\n      ...gameSettings,\r\n      categories: categories.filter((category) =>\r\n        selected.includes(category.id)\r\n      ),\r\n    }));\r\n  };\r\n  const handleChange = (prop) => (value) => {\r\n    setGameSettings(() => ({\r\n      ...gameSettings,\r\n      [prop]: value,\r\n    }));\r\n  };\r\n\r\n  const isSubmitDisabled = useMemo(\r\n    () => !gameSettings.categories.length,\r\n    [gameSettings.categories]\r\n  );\r\n\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <Button type=\"link\" className=\"btn-shadowed\">\r\n        <Link to={routes.main}>\r\n          <LeftOutlined />\r\n        </Link>\r\n      </Button>\r\n      <h1>Новая игра</h1>\r\n      <Form layout=\"horizontal\" onFinish={setGame(gameSettings)}>\r\n        <Form.Item label=\"Игроков\">\r\n          <InputNumber\r\n            min={3}\r\n            defaultValue={gameSettings.playersCont}\r\n            onChange={handleChange(\"playersCont\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Шпионов\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.spyesCount}\r\n            onChange={handleChange(\"spyesCount\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Продолжительность игры\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.timer}\r\n            onChange={handleChange(\"timer\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать таймер\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isTimerNeeded}\r\n            onChange={handleChange(\"isTimerNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Выбор первого игрока\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isFirstMemberChoiseNeeded}\r\n            onChange={handleChange(\"isFirstMemberChoiseNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать роли\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isRolesNeeded}\r\n            onChange={handleChange(\"isRolesNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Категории\" required>\r\n          <Select\r\n            mode=\"multiple\"\r\n            onChange={handleChangeCategories(\r\n              pathOr([], [\"categories\"], result)\r\n            )}\r\n            className=\"new-game__selector\"\r\n          >\r\n            {pathOr([], [\"categories\"], result).map((category) => (\r\n              <Option key={category.id}>{category.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Подсказывать вопросы\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isHelpQuestionsNeeded}\r\n            onChange={handleChange(\"isHelpQuestionsNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            htmlType=\"submit\"\r\n            className=\"new-game__submit\"\r\n            disabled={isSubmitDisabled}\r\n          >\r\n            Начать игру\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nNewGameView.propTypes = {\r\n  categories: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default NewGameView;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card } from \"antd\";\r\nimport {\r\n  assoc,\r\n  curry,\r\n  find,\r\n  map,\r\n  pathOr,\r\n  pipe,\r\n  prop,\r\n  propEq,\r\n  propOr,\r\n  repeat,\r\n  when,\r\n} from \"ramda\";\r\nimport routes from \"../routes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react\";\r\nimport uuid from \"uuid-random\";\r\nimport { toJS } from \"mobx\";\r\nimport arrayShuffle from \"array-shuffle\";\r\nimport classNames from \"classnames\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst alterIsOpened = curry((property, isOpened, id, items) =>\r\n  pipe(map(when(propEq(\"id\", id), assoc(property, isOpened))))(items)\r\n);\r\n\r\nconst RoleManagingView = (props) => {\r\n  const gameOptions = toJS(props.gameStore.options);\r\n  console.log(gameOptions);\r\n  const locations = gameOptions.categories\r\n    .map((option) => option.locations)\r\n    .flat();\r\n\r\n  const [randomLocationIndex] = useState(\r\n    Math.round(Math.random() * locations.length - 1)\r\n  );\r\n\r\n  const location = useMemo(\r\n    () => locations[randomLocationIndex],\r\n    [locations, randomLocationIndex]\r\n  );\r\n  useEffect(\r\n    () => location && props.gameStore.setLocation(location.name),\r\n    [location]\r\n  );\r\n  const [cards, setCards] = useState(\r\n    arrayShuffle([\r\n      ...repeat(null, gameOptions.playersCont - gameOptions.spyesCount).map(\r\n        () => {\r\n          return {\r\n            id: uuid(),\r\n            value: propOr(\"-\", \"name\", location),\r\n            type: \"location\",\r\n            description: pathOr(\r\n              \"Default description\",\r\n              [\"description\", \"location\"],\r\n              gameOptions\r\n            ),\r\n            isOpened: false,\r\n          };\r\n        }\r\n      ),\r\n      ...repeat(null, gameOptions.spyesCount).map(() => ({\r\n        id: uuid(),\r\n        type: \"spy\",\r\n        description: pathOr(\r\n          \"Default description\",\r\n          [\"description\", \"spy\"],\r\n          gameOptions\r\n        ),\r\n        isOpened: false,\r\n      })),\r\n    ])\r\n  );\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    toggleOpened(id);\r\n  };\r\n  const removeCard = (id) => {\r\n    return cards.filter((card) => card.id !== id);\r\n  };\r\n  const toggleOpened = (id) => {\r\n    if (pipe(find(propEq(\"id\", id)), prop(\"isOpened\"))(cards)) {\r\n      return setCards(() => removeCard(id));\r\n    }\r\n    return setCards(() =>\r\n      alterIsOpened(\r\n        \"isOpened\",\r\n        !cards.find((card) => card.id === id).isOpened,\r\n        id,\r\n        cards\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cards.length) {\r\n      history.push(routes.game);\r\n    }\r\n  }, [cards]);\r\n\r\n  const cardTheme = useCallback(\r\n    (isOpened) =>\r\n      classNames(\r\n        \"role-managing__card\",\r\n        isOpened ? \"role-managing__card--opened\" : \"\",\r\n        \"card\"\r\n      ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"role-managing__card-wrapper\">\r\n        {cards.map((card, index) => {\r\n          return (\r\n            <Card\r\n              key={card.id}\r\n              onClick={() => handleClick(card.id)}\r\n              className={cardTheme(card.isOpened)}\r\n              style={{ left: 3 * index, top: 3 * index }}\r\n            >\r\n              {card.isOpened ? (\r\n                <Meta\r\n                  title={card.type === \"location\" ? card.value : \"Вы шпион\"}\r\n                  description={card.description}\r\n                  className=\"role-managing__meta\"\r\n                />\r\n              ) : (\r\n                \"Посмотри, что внутри\"\r\n              )}\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nRoleManagingView.propTypes = {\r\n  cards: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default observer(RoleManagingView);\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useCountdownTimer } from \"use-countdown-timer\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { PropTypes } from \"mobx-react\";\r\nimport { toJS } from \"mobx\";\r\nimport {\r\n  PauseOutlined,\r\n  CaretRightOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst GameView = (props) => {\r\n  const gameStore = props.gameStore.options;\r\n  const { countdown, start, pause, isRunning, onExpire } = useCountdownTimer({\r\n    timer: 1000 * 60 * toJS(gameStore.timer),\r\n  });\r\n  const history = useHistory();\r\n  const setWinnerSpy = useCallback(() => {\r\n    props.gameStore.setWinner(\"spy\");\r\n    history.push(routes.winner);\r\n  }, []);\r\n  const setWinnerPeople = useCallback(() => {\r\n    props.gameStore.setWinner(\"people\");\r\n    history.push(routes.winner);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (countdown === 0) {\r\n      setWinnerSpy();\r\n    }\r\n  }, [countdown]);\r\n\r\n  const spyText =\r\n    gameStore.spyesCount > 1 ? \"Выиграли шпионы\" : \"Выиграл шпион\";\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <span className=\"game__counter\">\r\n        {Math.floor((countdown % 36e5) / 6e4)\r\n          .toString()\r\n          .padStart(2, \"0\")}{\" \"}\r\n        :{\" \"}\r\n        {Math.floor((countdown % 6e4) / 1000)\r\n          .toString()\r\n          .padStart(2, \"0\")}\r\n      </span>\r\n      <div className=\"game__controls\">\r\n        <div>\r\n          {isRunning ? (\r\n            <Button onClick={pause} className=\"btn-shadowed btn-small\">\r\n              <PauseOutlined />\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={start} className=\"btn-shadowed btn-small\">\r\n              <CaretRightOutlined />\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <Button className=\"btn-shadowed btn-small\">\r\n            <Link to={routes.main}>\r\n              <CloseOutlined />\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"game__result\">\r\n        <Button className=\"btn-error btn-small\" onClick={setWinnerSpy}>\r\n          {spyText}\r\n        </Button>\r\n        <Button className=\"btn-small\" onClick={setWinnerPeople}>\r\n          Выиграли мирные\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameView.propTypes = {\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default GameView;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass GameStore {\r\n  options = {\r\n    id: 1,\r\n    playersCont: 4,\r\n    spyesCount: 1,\r\n    isTimerNeeded: true,\r\n    timer: 5,\r\n    isFirstMemberChoiseNeeded: false,\r\n    isRolesNeeded: false,\r\n    categories: [],\r\n    isHelpQuestionsNeeded: false,\r\n    winner: \"\",\r\n  };\r\n\r\n  location = \"\";\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setLocation(location) {\r\n    console.log(location);\r\n    this.location = location;\r\n  }\r\n\r\n  setWinner(winner) {\r\n    console.log(winner);\r\n    this.options = {\r\n      ...this.options,\r\n      winner,\r\n    };\r\n  }\r\n\r\n  setGameOptions(gameOptions) {\r\n    this.options = {\r\n      ...gameOptions,\r\n      description: {\r\n        location:\r\n          \"Вы мирный житель. Ваша цель - вычислить шпиона и убрать его путем голосования\",\r\n        spy: \"Ваша цель - угадать локацию или не дать понять другим участникам, что вы ее не знаете\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport default GameStore;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { Form, Button, Input, message } from \"antd\";\r\nimport uuid from \"uuid-random\";\r\nimport { assoc, curry, map, pipe, propEq, when } from \"ramda\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport * as api from \"../client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { PlusOutlined, LeftOutlined } from \"@ant-design/icons\";\r\n\r\nconst alterValue = curry((property, value, id, items) =>\r\n  pipe(map(when(propEq(\"id\", id), assoc(property, value))))(items)\r\n);\r\n\r\nconst AddCategoryView = () => {\r\n  const [locations, setLocations] = useState([{ id: uuid(), name: \"\" }]);\r\n  const [category, setCategory] = useState({ name: \"\" });\r\n\r\n  const addLocation = () =>\r\n    setLocations([...locations, { id: uuid(), name: \"\" }]);\r\n\r\n  const handleChangeName = (event) =>\r\n    setCategory({\r\n      name: event.target.value,\r\n    });\r\n  const handleChangeLocationName = (id) => (event) => {\r\n    setLocations(alterValue(\"name\", event.target.value, id, locations));\r\n  };\r\n\r\n  const removeLocation = (id) => () =>\r\n    setLocations(locations.filter((location) => location.id !== id));\r\n\r\n  const saveCategory = async () => {\r\n    try {\r\n      await api.saveCategory({ name: category.name, locations });\r\n      message.success(\"Категория успешно добавлена\");\r\n    } catch (e) {\r\n      console.error(\"Error is\", e);\r\n      message.error(\"Категория не добавлена\");\r\n    }\r\n  };\r\n\r\n  const isAddButtonDisabled = useMemo(\r\n    () => !category.name || !locations.find((location) => location.name),\r\n    [name, locations]\r\n  );\r\n  return (\r\n    <Form layout=\"vertical\" onFinish={saveCategory}>\r\n      <Button type=\"link\" className=\"btn-shadowed\">\r\n        <Link to={routes.main}>\r\n          <LeftOutlined />\r\n        </Link>\r\n      </Button>\r\n      <Form.Item>\r\n        <Input\r\n          onChange={handleChangeName}\r\n          placeholder=\"Название\"\r\n          size=\"large\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Локации\" className=\"df fdc\">\r\n        {locations.map(({ id, name }) => (\r\n          <div className=\"df\" key={id} style={{ paddingBottom: 3 }}>\r\n            <Input onChange={handleChangeLocationName(id)} value={name} />\r\n            {locations.length > 1 && (\r\n              <Button\r\n                size=\"small\"\r\n                onClick={removeLocation(id)}\r\n                className=\"btn-xsmall\"\r\n              >\r\n                <DeleteOutlined />\r\n              </Button>\r\n            )}\r\n          </div>\r\n        ))}\r\n        <Button\r\n          type=\"link\"\r\n          onClick={addLocation}\r\n          className=\"btn-xsmall\"\r\n          style={{ margin: \"0 auto\" }}\r\n        >\r\n          <PlusOutlined />\r\n        </Button>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button\r\n          htmlType=\"submit\"\r\n          className=\"btn-small\"\r\n          disabled={isAddButtonDisabled}\r\n        >\r\n          Добавить категорию\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCategoryView;\r\n","import { Divider, List } from 'antd';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport { PropTypes } from 'mobx-react';\r\nimport * as React from 'react';\r\n\r\nexport const Category = (props) => {\r\n  const { locations, name, } = props;\r\n  return (\r\n    <div className=\"category\">\r\n      <List header={<Divider>{name}</Divider>}>\r\n        {locations.map((place) => (\r\n          <List.Item key={place.id}>\r\n            <Paragraph editable={{ onChange: console.log, }}>\r\n              {place.name}\r\n            </Paragraph>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nCategory.propTypes = {\r\n  locations: PropTypes.array,\r\n  name: PropTypes.string,\r\n};\r\n","import { LeftOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Button, List } from \"antd\";\r\nimport * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCategories } from \"../../client\";\r\nimport { Category } from \"../../components/Category\";\r\nimport routes from \"../../routes\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport const CategoriesView = () => {\r\n  const [categories, setCategories] = React.useState([]);\r\n  React.useEffect(async () => {\r\n    const { categories } = await getCategories();\r\n    setCategories(categories);\r\n  }, []);\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <div className=\"df aic jcsb\">\r\n        <Button type=\"link\" className=\"btn-shadowed\">\r\n          <Link to={routes.main}>\r\n            <LeftOutlined />\r\n          </Link>\r\n        </Button>\r\n        <h1 className=\"categories__heading\">Список категорий</h1>\r\n      </div>\r\n      <List className=\"categories__list\">\r\n        {categories.length ? (\r\n          categories.map((category) => (\r\n            <List.Item key={category.id}>\r\n              <Category {...category} />\r\n            </List.Item>\r\n          ))\r\n        ) : (\r\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n        )}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\nconst addAchieve = (obj) => obj;\r\n\r\nexport const RulesView = () => (\r\n  <div>\r\n    <Button type=\"link\" className=\"btn-shadowed\">\r\n      <Link to={routes.main}>\r\n        <LeftOutlined />\r\n      </Link>\r\n    </Button>\r\n    <div className=\"df fdc aifs\">\r\n      <h1>Правила</h1>\r\n      <h2>Шпион</h2>\r\n      <p>\r\n        Привет! Шпион - это настольная пати-гейм игра. Есть несколько портов на\r\n        мобильные платформы, мне хочется сделать свой с некоторыми отличиями.\r\n      </p>\r\n      <h2>Суть игры</h2>\r\n      <p>\r\n        Загадывается локация: все участники кроме шпиона знают о ней. Задача\r\n        шпиона: угадать локацию и назвать ее, либо сделать все возможное, чтобы\r\n        его не обнаружили. Все остальные игроки должны приложить максимум\r\n        усилий, чтобы вычислить шпиона. Вот вы играли в Among Us? Тут все то же\r\n        самое, но только убивать никого не нужно, только найти предателя. Более\r\n        подробные правила с примером сыгранной игры можно посмотреть здесь:{\" \"}\r\n        <a href=\"https://www.1c-interes.ru/download_files/Rules_of_the_game/SW_spyfall_rules.pdf\">\r\n          правила.pdf\r\n        </a>\r\n      </p>\r\n      <p>\r\n        Кстати, локации из этих правил я тоже добавлю, если уже этого не сделал\r\n      </p>\r\n      <h2>Возможности</h2>\r\n      <h2>Главный экран</h2>\r\n      <p>На главном экране находятся следующие опции:</p>\r\n      <h2>Новая игра</h2>\r\n      <p>\r\n        Экран новой игры содержит форму с выбором настроек раунда. В них входит\r\n        (еще не реализованные фичи будут зачеркнуты):\r\n      </p>\r\n      <ul>\r\n        <li>Количество игроков</li>\r\n        <li>Количество шпионов</li>\r\n        <li>\r\n          <s>Нужен ли таймер</s>\r\n        </li>\r\n        <li>Таймер(минуты)</li>\r\n        <li>\r\n          <s>Позволить игре выбрать первого человека, который задает вопрос</s>\r\n        </li>\r\n        <li>\r\n          <s>Нужны ли роли (локация может не содержать ролей)</s>\r\n        </li>\r\n        <li>Выбор категорий</li>\r\n        <li>\r\n          <s>Подсказывать вопросы</s>\r\n        </li>\r\n        <li>\r\n          <s>Шпионы знают друг друга</s>\r\n        </li>\r\n      </ul>\r\n      <h2>Список категорий</h2>\r\n      <p>\r\n        Здесь отображаются категории для игры. Категория содержит название\r\n        категории и локации, которые в этой категории находятся. Список\r\n        категорий делится на локальные и из интернета. Категории из интернета\r\n        можно скачать себе. В списке категорий также появится кнопка добавления\r\n        категории в виде плюса\r\n      </p>\r\n      <h2>Новая категория с локациями</h2>\r\n      <p>\r\n        Вы можете создавать новые категории, но на данном этапе они создаются\r\n        только на вашем устройстве. Чуть позже я добавлю возможность добавлять\r\n        категории для всех пользователей приложения и выстраивать топы.\r\n      </p>\r\n      <h2>Правила</h2>\r\n      <p>\r\n        Вы сейчас здесь и догадываетесь, что тут находится. Кстати, нажми{\" \"}\r\n        <Button\r\n          type=\"link\"\r\n          onClick={addAchieve({\r\n            name: \"Внимательность\",\r\n            description:\r\n              \"Молодец! Ты ознакамливаешься с правилами, а не рпосто тыкаешь на кнопки\",\r\n          })}\r\n        >\r\n          сюда\r\n        </Button>\r\n      </p>\r\n      <h2>Показ карточки локации</h2>\r\n      <p>\r\n        После выбора удобных для вас настроек появится окно с карточками. Здесь\r\n        каждому игроку показывается либо локация, либо информация о том, что\r\n        игрок является шпионом. При определенных настройках игры шпиону будет\r\n        предоставлена информация о других шпионах. Если есть еще роль,\r\n        рекомендуется (но не обязательно) придерживаться этой роли.\r\n      </p>\r\n      <h2>Игровой процесс</h2>\r\n      <p>\r\n        В центре экрана расположен таймер и кнопка паузы/возобновления обратного\r\n        отсчета. Также есть кнопка окончания игры, которая вернет вас на Главный\r\n        экран Ниже расположены кнопки выбора, чья же сторона победила. По клику\r\n        на них появится счет и будет видно, кто ведет, а кому необходимо\r\n        поднапрячься. В каждой игре шпионом может стать каждый, но не пытайтесь\r\n        привязываться к той или иной стороне. Если вы шпион в этой партии,\r\n        примите все свои навыки убеждения и красноречия, чтобы победили шпионы.\r\n        Если вы им не являетесь, найдите шпиона любой ценой.\r\n      </p>\r\n      <h2>Удачи!</h2>\r\n    </div>\r\n  </div>\r\n);\r\n","import * as React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\n\r\nexport const WinnerView = (props) => {\r\n  const history = useHistory();\r\n  const moveToMain = () => {\r\n    history.push(routes.main);\r\n  };\r\n  const SpyWinner = (props) => (\r\n    <div className=\"role-managing__card-wrapper winner__spy\">\r\n      <Card onClick={moveToMain} className=\"role-managing__card\">\r\n        <h1>Выиграли шпионы</h1>\r\n        <p>Загаданная локация: {props.location}</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n  const PeopleWinner = (props) => (\r\n    <div className=\"role-managing__card-wrapper winner__people\">\r\n      <Card onClick={moveToMain} className=\"role-managing__card\">\r\n        <h1>Выиграли мирные люди</h1>\r\n        <p>Поздравляю</p>\r\n        <p>Загаданная локация: {props.location}</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n  const { options, location } = props.gameStore;\r\n\r\n  console.log(options.side, location);\r\n\r\n  return options.winner === \"spy\" ? (\r\n    <SpyWinner location={location} />\r\n  ) : (\r\n    <PeopleWinner location={location} />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport MainView from \"./views/main.vew\";\r\nimport NewGameView from \"./views/new-game.vew\";\r\nimport RoleManagingView from \"./views/role-managing.view\";\r\nimport routes from \"./routes\";\r\nimport GameView from \"./views/game.view\";\r\nimport GameStore from \"./stores/game.store\";\r\nimport AddCategoryView from \"./views/add-category.view\";\r\nimport { CategoriesView } from \"./views/categories/categories.view\";\r\nimport { RulesView } from \"./views/rules.view\";\r\nimport { WinnerView } from \"./views/winner.view\";\r\n\r\nconst gameStore = new GameStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={routes.main}>\r\n            <MainView\r\n              menuItems={[\r\n                { id: 1, name: \"Новая игра\", path: routes.newGame },\r\n                { id: 2, name: \"Правила\", path: routes.rules },\r\n                {\r\n                  id: 3,\r\n                  name: \"Добавить новую категорию\",\r\n                  path: routes.addCategory,\r\n                },\r\n                {\r\n                  id: 4,\r\n                  name: \"Список категорий\",\r\n                  path: routes.categories,\r\n                },\r\n              ]}\r\n            />\r\n          </Route>\r\n          <Route exact path={routes.newGame}>\r\n            <NewGameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.roleManaging}>\r\n            <RoleManagingView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.game}>\r\n            <GameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.addCategory}>\r\n            <AddCategoryView />\r\n          </Route>\r\n          <Route exact path={routes.rules}>\r\n            <RulesView />\r\n          </Route>\r\n          <Route exact path={routes.categories}>\r\n            <CategoriesView />\r\n          </Route>\r\n          <Route exact path={routes.winner}>\r\n            <WinnerView gameStore={gameStore} />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}