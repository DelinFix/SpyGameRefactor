{"version":3,"sources":["views/main.vew.jsx","client/index.js","routes.js","views/new-game.vew.jsx","views/role-managing.view.jsx","views/game.view.jsx","stores/game.store.js","views/add-category.view.jsx","components/Category.jsx","views/categories/categories.view.jsx","views/rules.view.jsx","views/winner.view.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MainView","props","className","mode","menuItems","map","item","to","path","name","id","getCategories","axios","get","then","data","record","saveCategory","category","a","categories","put","uuid","e","console","error","routes","main","newGame","rules","roleManaging","game","addCategory","winner","Option","Select","defaultSettings","playersCont","spyesCount","isTimerNeeded","timer","isFirstMemberChoiseNeeded","isRolesNeeded","isHelpQuestionsNeeded","NewGameView","gameSetting","usePromise","result","useState","gameSettings","setGameSettings","history","useHistory","handleChange","prop","value","isSubmitDisabled","useMemo","length","type","LeftOutlined","layout","onFinish","gameStore","setGameOptions","push","Item","label","min","defaultValue","onChange","disabled","checked","required","pathOr","selected","filter","includes","String","htmlType","Meta","Card","alterIsOpened","curry","property","isOpened","items","pipe","when","propEq","assoc","observer","gameOptions","toJS","options","log","locations","option","flat","Math","round","random","at","randomLocationIndex","location","useEffect","setLocation","arrayShuffle","repeat","propOr","description","cards","setCards","toggleOpened","find","card","removeCard","cardTheme","useCallback","classNames","index","onClick","style","left","top","title","GameView","useCountdownTimer","countdown","start","pause","isRunning","onExpire","setWinnerSpy","setWinner","setWinnerPeople","spyText","floor","toString","padStart","PauseOutlined","CaretRightOutlined","CloseOutlined","GameStore","makeAutoObservable","this","spy","alterValue","AddCategoryView","setLocations","setCategory","handleChangeLocationName","event","target","removeLocation","api","message","success","isAddButtonDisabled","placeholder","size","paddingBottom","DeleteOutlined","margin","PlusOutlined","Category","header","place","editable","CategoriesView","React","setCategories","LoadingOutlined","fontSize","spin","RulesView","href","WinnerView","moveToMain","SpyWinner","PeopleWinner","side","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29512e40.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst MainView = (props) => {\n  return (\n    <div className=\"df fdc\">\n      <h1>Шпион</h1>\n      <ul mode=\"inline\" className=\"main-view\">\n        {props.menuItems.map((item) => (\n          <li key={item.id}>\n            <Link to={item.path}>{item.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMainView.propTypes = {\n  menuItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n    })\n  ),\n};\n\nexport default MainView;\n","import axios from \"axios\";\nimport uuid from \"uuid-random\";\n\nconst getCategories = () => {\n  return axios\n    .get(\"https://api.jsonbin.io/v3/b/631f1e945c146d63ca98ad76/latest\")\n    .then(({ data }) => data.record);\n};\n\nconst saveCategory = async (category) => {\n  const { categories } = await getCategories();\n  try {\n    axios.put(\"https://api.jsonbin.io/v3/b/631f1e945c146d63ca98ad76\", {\n      categories: [\n        ...categories,\n        {\n          id: uuid(),\n          ...category,\n        },\n      ],\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport { getCategories, saveCategory };\n","const routes = {\n  main: \"/\",\n  newGame: \"/new-game\",\n  rules: \"/rules\",\n  roleManaging: \"/role-managing\",\n  game: \"/game\",\n  addCategory: \"/add-category\",\n  categories: \"/categories\",\n  winner: \"/winner\",\n};\n\nexport default routes;\n","import React, { useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button, Select, InputNumber, Switch } from \"antd\";\nimport usePromise from \"react-use-promise\";\nimport { getCategories } from \"../client\";\nimport { pathOr } from \"ramda\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport routes from \"../routes\";\nimport { LeftOutlined } from \"@ant-design/icons\";\n\nconst { Option } = Select;\n\nconst defaultSettings = {\n  id: 1,\n  playersCont: 4,\n  spyesCount: 1,\n  isTimerNeeded: true,\n  timer: 5,\n  isFirstMemberChoiseNeeded: false,\n  isRolesNeeded: false,\n  categories: [],\n  isHelpQuestionsNeeded: false,\n};\n\nconst NewGameView = (props) => {\n  const [result] = usePromise(getCategories, []);\n  const [gameSettings, setGameSettings] = useState(defaultSettings);\n  const history = useHistory();\n  const setGame = (gameSetting) => () => {\n    props.gameStore.setGameOptions(gameSetting);\n    history.push(routes.roleManaging);\n  };\n  const handleChangeCategories = (categories) => (selected) => {\n    return setGameSettings(() => ({\n      ...gameSettings,\n      categories: categories.filter((category) =>\n        selected.includes(String(category.id))\n      ),\n    }));\n  };\n  const handleChange = (prop) => (value) => {\n    setGameSettings(() => ({\n      ...gameSettings,\n      [prop]: value,\n    }));\n  };\n\n  const isSubmitDisabled = useMemo(\n    () => !gameSettings.categories.length,\n    [gameSettings.categories]\n  );\n\n  return (\n    <div className=\"df fdc\">\n      <Button type=\"link\" className=\"btn-shadowed\">\n        <Link to={routes.main}>\n          <LeftOutlined />\n        </Link>\n      </Button>\n      <h1>Новая игра</h1>\n      <Form layout=\"horizontal\" onFinish={setGame(gameSettings)}>\n        <Form.Item label=\"Игроков\">\n          <InputNumber\n            min={3}\n            defaultValue={gameSettings.playersCont}\n            onChange={handleChange(\"playersCont\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Шпионов\">\n          <InputNumber\n            min={1}\n            defaultValue={gameSettings.spyesCount}\n            onChange={handleChange(\"spyesCount\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Продолжительность игры\">\n          <InputNumber\n            min={1}\n            defaultValue={gameSettings.timer}\n            onChange={handleChange(\"timer\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Использовать таймер\">\n          <Switch\n            disabled\n            checked={gameSettings.isTimerNeeded}\n            onChange={handleChange(\"isTimerNeeded\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Выбор первого игрока\">\n          <Switch\n            disabled\n            checked={gameSettings.isFirstMemberChoiseNeeded}\n            onChange={handleChange(\"isFirstMemberChoiseNeeded\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Использовать роли\">\n          <Switch\n            disabled\n            checked={gameSettings.isRolesNeeded}\n            onChange={handleChange(\"isRolesNeeded\")}\n          />\n        </Form.Item>\n        <Form.Item label=\"Категории\" required>\n          <Select\n            mode=\"multiple\"\n            onChange={handleChangeCategories(\n              pathOr([], [\"categories\"], result)\n            )}\n            className=\"new-game__selector\"\n          >\n            {pathOr([], [\"categories\"], result).map((category) => (\n              <Option key={category.id}>{category.name}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Подсказывать вопросы\">\n          <Switch\n            disabled\n            checked={gameSettings.isHelpQuestionsNeeded}\n            onChange={handleChange(\"isHelpQuestionsNeeded\")}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            htmlType=\"submit\"\n            className=\"new-game__submit\"\n            disabled={isSubmitDisabled}\n          >\n            Начать игру\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nNewGameView.propTypes = {\n  categories: PropTypes.array,\n  gameStore: PropTypes.object,\n};\n\nexport default NewGameView;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"antd\";\nimport {\n  assoc,\n  curry,\n  find,\n  map,\n  pathOr,\n  pipe,\n  prop,\n  propEq,\n  propOr,\n  repeat,\n  when,\n} from \"ramda\";\nimport routes from \"../routes\";\nimport { useHistory } from \"react-router-dom\";\nimport { observer } from \"mobx-react\";\nimport uuid from \"uuid-random\";\nimport { toJS } from \"mobx\";\nimport arrayShuffle from \"array-shuffle\";\nimport classNames from \"classnames\";\n\nconst { Meta } = Card;\n\nconst alterIsOpened = curry((property, isOpened, id, items) =>\n  pipe(map(when(propEq(\"id\", id), assoc(property, isOpened))))(items)\n);\n\nconst RoleManagingView = (props) => {\n  const gameOptions = toJS(props.gameStore.options);\n  console.log(gameOptions);\n  const locations = gameOptions.categories\n    .map((option) => option.locations)\n    .flat();\n\n  const [randomLocationIndex] = useState(\n    Math.round(Math.random() * locations.at(-1))\n  );\n\n  const location = useMemo(\n    () => locations[randomLocationIndex],\n    [locations, randomLocationIndex]\n  );\n  useEffect(\n    () => {\n      console.log(randomLocationIndex);\n      return location && props.gameStore.setLocation(location.name);\n    },\n    [location]\n  );\n  const [cards, setCards] = useState(\n    arrayShuffle([\n      ...repeat(null, gameOptions.playersCont - gameOptions.spyesCount).map(\n        () => {\n          return {\n            id: uuid(),\n            value: propOr(\"-\", \"name\", location),\n            type: \"location\",\n            description: pathOr(\n              \"Default description\",\n              [\"description\", \"location\"],\n              gameOptions\n            ),\n            isOpened: false,\n          };\n        }\n      ),\n      ...repeat(null, gameOptions.spyesCount).map(() => ({\n        id: uuid(),\n        type: \"spy\",\n        description: pathOr(\n          \"Default description\",\n          [\"description\", \"spy\"],\n          gameOptions\n        ),\n        isOpened: false,\n      })),\n    ])\n  );\n  const history = useHistory();\n\n  const handleClick = (id) => {\n    toggleOpened(id);\n  };\n  const removeCard = (id) => {\n    return cards.filter((card) => card.id !== id);\n  };\n  const toggleOpened = (id) => {\n    if (pipe(find(propEq(\"id\", id)), prop(\"isOpened\"))(cards)) {\n      return setCards(() => removeCard(id));\n    }\n    return setCards(() =>\n      alterIsOpened(\n        \"isOpened\",\n        !cards.find((card) => card.id === id).isOpened,\n        id,\n        cards\n      )\n    );\n  };\n\n  useEffect(() => {\n    if (!cards.length) {\n      history.push(routes.game);\n    }\n  }, [cards]);\n\n  const cardTheme = useCallback(\n    (isOpened) =>\n      classNames(\n        \"role-managing__card\",\n        isOpened ? \"role-managing__card--opened\" : \"\",\n        \"card\"\n      ),\n    []\n  );\n\n  return (\n    <>\n      <div className=\"role-managing__card-wrapper\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={card.id}\n              onClick={() => handleClick(card.id)}\n              className={cardTheme(card.isOpened)}\n              style={{ left: 3 * index, top: 3 * index }}\n            >\n              {card.isOpened ? (\n                <Meta\n                  title={card.type === \"location\" ? card.value : \"Вы шпион\"}\n                  description={card.description}\n                  className=\"role-managing__meta\"\n                />\n              ) : (\n                \"Посмотри, что внутри\"\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nRoleManagingView.propTypes = {\n  cards: PropTypes.array,\n  gameStore: PropTypes.object,\n};\n\nexport default observer(RoleManagingView);\n","import React, { useCallback, useEffect } from \"react\";\nimport { Button } from \"antd\";\nimport { useCountdownTimer } from \"use-countdown-timer\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport routes from \"../routes\";\nimport { PropTypes } from \"mobx-react\";\nimport { toJS } from \"mobx\";\nimport {\n  PauseOutlined,\n  CaretRightOutlined,\n  CloseOutlined,\n} from \"@ant-design/icons\";\n\nconst GameView = (props) => {\n  const gameStore = props.gameStore.options;\n  const { countdown, start, pause, isRunning, onExpire } = useCountdownTimer({\n    timer: 1000 * 60 * toJS(gameStore.timer),\n  });\n  const history = useHistory();\n  const setWinnerSpy = useCallback(() => {\n    props.gameStore.setWinner(\"spy\");\n    history.push(routes.winner);\n  }, []);\n  const setWinnerPeople = useCallback(() => {\n    props.gameStore.setWinner(\"people\");\n    history.push(routes.winner);\n  }, []);\n\n  useEffect(() => {\n    if (countdown === 0) {\n      setWinnerSpy();\n    }\n  }, [countdown]);\n\n  const spyText =\n    gameStore.spyesCount > 1 ? \"Выиграли шпионы\" : \"Выиграл шпион\";\n  return (\n    <div className=\"df fdc\">\n      <span className=\"game__counter\">\n        {Math.floor((countdown % 36e5) / 6e4)\n          .toString()\n          .padStart(2, \"0\")}{\" \"}\n        :{\" \"}\n        {Math.floor((countdown % 6e4) / 1000)\n          .toString()\n          .padStart(2, \"0\")}\n      </span>\n      <div className=\"game__controls\">\n        <div>\n          {isRunning ? (\n            <Button onClick={pause} className=\"btn-shadowed btn-small\">\n              <PauseOutlined />\n            </Button>\n          ) : (\n            <Button onClick={start} className=\"btn-shadowed btn-small\">\n              <CaretRightOutlined />\n            </Button>\n          )}\n        </div>\n        <div>\n          <Button className=\"btn-shadowed btn-small\">\n            <Link to={routes.main}>\n              <CloseOutlined />\n            </Link>\n          </Button>\n        </div>\n      </div>\n      <div className=\"game__result\">\n        <Button className=\"btn-error btn-small\" onClick={setWinnerSpy}>\n          {spyText}\n        </Button>\n        <Button className=\"btn-small\" onClick={setWinnerPeople}>\n          Выиграли мирные\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nGameView.propTypes = {\n  gameStore: PropTypes.object,\n};\n\nexport default GameView;\n","import { makeAutoObservable } from \"mobx\";\n\nclass GameStore {\n  options = {\n    id: 1,\n    playersCont: 4,\n    spyesCount: 1,\n    isTimerNeeded: true,\n    timer: 5,\n    isFirstMemberChoiseNeeded: false,\n    isRolesNeeded: false,\n    categories: [],\n    isHelpQuestionsNeeded: false,\n    winner: \"\",\n  };\n\n  location = \"\";\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setLocation(location) {\n    console.log(location);\n    this.location = location;\n  }\n\n  setWinner(winner) {\n    console.log(winner);\n    this.options = {\n      ...this.options,\n      winner,\n    };\n  }\n\n  setGameOptions(gameOptions) {\n    this.options = {\n      ...gameOptions,\n      description: {\n        location:\n          \"Вы мирный житель. Ваша цель - вычислить шпиона и убрать его путем голосования\",\n        spy: \"Ваша цель - угадать локацию или не дать понять другим участникам, что вы ее не знаете\",\n      },\n    };\n  }\n}\n\nexport default GameStore;\n","import React, { useMemo, useState } from \"react\";\nimport { Form, Button, Input, message } from \"antd\";\nimport uuid from \"uuid-random\";\nimport { assoc, curry, map, pipe, propEq, when } from \"ramda\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport * as api from \"../client\";\nimport { Link } from \"react-router-dom\";\nimport routes from \"../routes\";\nimport { PlusOutlined, LeftOutlined } from \"@ant-design/icons\";\n\nconst alterValue = curry((property, value, id, items) =>\n  pipe(map(when(propEq(\"id\", id), assoc(property, value))))(items)\n);\n\nconst AddCategoryView = () => {\n  const [locations, setLocations] = useState([{ id: uuid(), name: \"\" }]);\n  const [category, setCategory] = useState({ name: \"\" });\n\n  const addLocation = () =>\n    setLocations([...locations, { id: uuid(), name: \"\" }]);\n\n  const handleChangeName = (event) =>\n    setCategory({\n      name: event.target.value,\n    });\n  const handleChangeLocationName = (id) => (event) => {\n    setLocations(alterValue(\"name\", event.target.value, id, locations));\n  };\n\n  const removeLocation = (id) => () =>\n    setLocations(locations.filter((location) => location.id !== id));\n\n  const saveCategory = async () => {\n    try {\n      await api.saveCategory({ name: category.name, locations });\n      message.success(\"Категория успешно добавлена\");\n    } catch (e) {\n      console.error(\"Error is\", e);\n      message.error(\"Категория не добавлена\");\n    }\n  };\n\n  const isAddButtonDisabled = useMemo(\n    () => !category.name || !locations.find((location) => location.name),\n    [name, locations]\n  );\n  return (\n    <Form layout=\"vertical\" onFinish={saveCategory}>\n      <Button type=\"link\" className=\"btn-shadowed\">\n        <Link to={routes.main}>\n          <LeftOutlined />\n        </Link>\n      </Button>\n      <Form.Item>\n        <Input\n          onChange={handleChangeName}\n          placeholder=\"Название\"\n          size=\"large\"\n        />\n      </Form.Item>\n      <Form.Item label=\"Локации\" className=\"df fdc\">\n        {locations.map(({ id, name }) => (\n          <div className=\"df\" key={id} style={{ paddingBottom: 3 }}>\n            <Input onChange={handleChangeLocationName(id)} value={name} />\n            {locations.length > 1 && (\n              <Button\n                size=\"small\"\n                onClick={removeLocation(id)}\n                className=\"btn-xsmall\"\n              >\n                <DeleteOutlined />\n              </Button>\n            )}\n          </div>\n        ))}\n        <Button\n          type=\"link\"\n          onClick={addLocation}\n          className=\"btn-xsmall\"\n          style={{ margin: \"0 auto\" }}\n        >\n          <PlusOutlined />\n        </Button>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          htmlType=\"submit\"\n          className=\"btn-small\"\n          disabled={isAddButtonDisabled}\n        >\n          Добавить категорию\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default AddCategoryView;\n","import { Divider, List } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { PropTypes } from 'mobx-react';\nimport * as React from 'react';\n\nexport const Category = (props) => {\n  const { locations, name, } = props;\n  return (\n    <div className=\"category\">\n      <List header={<Divider>{name}</Divider>}>\n        {locations.map((place) => (\n          <List.Item key={place.id}>\n            <Paragraph editable={{ onChange: console.log, }}>\n              {place.name}\n            </Paragraph>\n          </List.Item>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nCategory.propTypes = {\n  locations: PropTypes.array,\n  name: PropTypes.string,\n};\n","import { LeftOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { Button, List } from \"antd\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getCategories } from \"../../client\";\nimport { Category } from \"../../components/Category\";\nimport routes from \"../../routes\";\n\nimport \"./style.css\";\n\nexport const CategoriesView = () => {\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(async () => {\n    const { categories } = await getCategories();\n    setCategories(categories);\n  }, []);\n  return (\n    <div className=\"df fdc\">\n      <div className=\"df aic jcsb\">\n        <Button type=\"link\" className=\"btn-shadowed\">\n          <Link to={routes.main}>\n            <LeftOutlined />\n          </Link>\n        </Button>\n        <h1 className=\"categories__heading\">Список категорий</h1>\n      </div>\n      <List className=\"categories__list\">\n        {categories.length ? (\n          categories.map((category) => (\n            <List.Item key={category.id}>\n              <Category {...category} />\n            </List.Item>\n          ))\n        ) : (\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\n        )}\n      </List>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Button } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport routes from \"../routes\";\nimport { LeftOutlined } from \"@ant-design/icons\";\n\nconst addAchieve = (obj) => obj;\n\nexport const RulesView = () => (\n  <div>\n    <Button type=\"link\" className=\"btn-shadowed\">\n      <Link to={routes.main}>\n        <LeftOutlined />\n      </Link>\n    </Button>\n    <div className=\"df fdc aifs\">\n      <h1>Правила</h1>\n      <h2>Шпион</h2>\n      <p>\n        Привет! Шпион - это настольная пати-гейм игра. Есть несколько портов на\n        мобильные платформы, мне хочется сделать свой с некоторыми отличиями.\n      </p>\n      <h2>Суть игры</h2>\n      <p>\n        Загадывается локация: все участники кроме шпиона знают о ней. Задача\n        шпиона: угадать локацию и назвать ее, либо сделать все возможное, чтобы\n        его не обнаружили. Все остальные игроки должны приложить максимум\n        усилий, чтобы вычислить шпиона. Вот вы играли в Among Us? Тут все то же\n        самое, но только убивать никого не нужно, только найти предателя. Более\n        подробные правила с примером сыгранной игры можно посмотреть здесь:{\" \"}\n        <a href=\"https://www.1c-interes.ru/download_files/Rules_of_the_game/SW_spyfall_rules.pdf\">\n          правила.pdf\n        </a>\n      </p>\n      <p>\n        Кстати, локации из этих правил я тоже добавлю, если уже этого не сделал\n      </p>\n      <h2>Возможности</h2>\n      <h2>Главный экран</h2>\n      <p>На главном экране находятся следующие опции:</p>\n      <h2>Новая игра</h2>\n      <p>\n        Экран новой игры содержит форму с выбором настроек раунда. В них входит\n        (еще не реализованные фичи будут зачеркнуты):\n      </p>\n      <ul>\n        <li>Количество игроков</li>\n        <li>Количество шпионов</li>\n        <li>\n          <s>Нужен ли таймер</s>\n        </li>\n        <li>Таймер(минуты)</li>\n        <li>\n          <s>Позволить игре выбрать первого человека, который задает вопрос</s>\n        </li>\n        <li>\n          <s>Нужны ли роли (локация может не содержать ролей)</s>\n        </li>\n        <li>Выбор категорий</li>\n        <li>\n          <s>Подсказывать вопросы</s>\n        </li>\n        <li>\n          <s>Шпионы знают друг друга</s>\n        </li>\n      </ul>\n      <h2>Список категорий</h2>\n      <p>\n        Здесь отображаются категории для игры. Категория содержит название\n        категории и локации, которые в этой категории находятся. Список\n        категорий делится на локальные и из интернета. Категории из интернета\n        можно скачать себе. В списке категорий также появится кнопка добавления\n        категории в виде плюса\n      </p>\n      <h2>Новая категория с локациями</h2>\n      <p>\n        Вы можете создавать новые категории, но на данном этапе они создаются\n        только на вашем устройстве. Чуть позже я добавлю возможность добавлять\n        категории для всех пользователей приложения и выстраивать топы.\n      </p>\n      <h2>Правила</h2>\n      <p>\n        Вы сейчас здесь и догадываетесь, что тут находится. Кстати, нажми{\" \"}\n        <Button\n          type=\"link\"\n          onClick={addAchieve({\n            name: \"Внимательность\",\n            description:\n              \"Молодец! Ты ознакамливаешься с правилами, а не рпосто тыкаешь на кнопки\",\n          })}\n        >\n          сюда\n        </Button>\n      </p>\n      <h2>Показ карточки локации</h2>\n      <p>\n        После выбора удобных для вас настроек появится окно с карточками. Здесь\n        каждому игроку показывается либо локация, либо информация о том, что\n        игрок является шпионом. При определенных настройках игры шпиону будет\n        предоставлена информация о других шпионах. Если есть еще роль,\n        рекомендуется (но не обязательно) придерживаться этой роли.\n      </p>\n      <h2>Игровой процесс</h2>\n      <p>\n        В центре экрана расположен таймер и кнопка паузы/возобновления обратного\n        отсчета. Также есть кнопка окончания игры, которая вернет вас на Главный\n        экран Ниже расположены кнопки выбора, чья же сторона победила. По клику\n        на них появится счет и будет видно, кто ведет, а кому необходимо\n        поднапрячься. В каждой игре шпионом может стать каждый, но не пытайтесь\n        привязываться к той или иной стороне. Если вы шпион в этой партии,\n        примите все свои навыки убеждения и красноречия, чтобы победили шпионы.\n        Если вы им не являетесь, найдите шпиона любой ценой.\n      </p>\n      <h2>Удачи!</h2>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Card } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport routes from \"../routes\";\n\nexport const WinnerView = (props) => {\n  const history = useHistory();\n  const moveToMain = () => {\n    history.push(routes.main);\n  };\n  const SpyWinner = (props) => (\n    <div className=\"role-managing__card-wrapper winner__spy\">\n      <Card onClick={moveToMain} className=\"role-managing__card\">\n        <h1>Выиграли шпионы</h1>\n        <p>\n          Загаданная локация: <span>{props.location}</span>\n        </p>\n      </Card>\n    </div>\n  );\n  const PeopleWinner = (props) => (\n    <div className=\"role-managing__card-wrapper winner__people\">\n      <Card onClick={moveToMain} className=\"role-managing__card\">\n        <h1>Выиграли мирные люди</h1>\n        <p>Поздравляю</p>\n        <p>\n          Загаданная локация: <span>{props.location}</span>\n        </p>\n      </Card>\n    </div>\n  );\n  const { options, location } = props.gameStore;\n\n  console.log(options.side, location);\n\n  return options.winner === \"spy\" ? (\n    <SpyWinner location={location} />\n  ) : (\n    <PeopleWinner location={location} />\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport MainView from \"./views/main.vew\";\nimport NewGameView from \"./views/new-game.vew\";\nimport RoleManagingView from \"./views/role-managing.view\";\nimport routes from \"./routes\";\nimport GameView from \"./views/game.view\";\nimport GameStore from \"./stores/game.store\";\nimport AddCategoryView from \"./views/add-category.view\";\nimport { CategoriesView } from \"./views/categories/categories.view\";\nimport { RulesView } from \"./views/rules.view\";\nimport { WinnerView } from \"./views/winner.view\";\n\nconst gameStore = new GameStore();\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={routes.main}>\n            <MainView\n              menuItems={[\n                { id: 1, name: \"Новая игра\", path: routes.newGame },\n                { id: 2, name: \"Правила\", path: routes.rules },\n                {\n                  id: 3,\n                  name: \"Добавить новую категорию\",\n                  path: routes.addCategory,\n                },\n                {\n                  id: 4,\n                  name: \"Список категорий\",\n                  path: routes.categories,\n                },\n              ]}\n            />\n          </Route>\n          <Route exact path={routes.newGame}>\n            <NewGameView gameStore={gameStore} />\n          </Route>\n          <Route exact path={routes.roleManaging}>\n            <RoleManagingView gameStore={gameStore} />\n          </Route>\n          <Route exact path={routes.game}>\n            <GameView gameStore={gameStore} />\n          </Route>\n          <Route exact path={routes.addCategory}>\n            <AddCategoryView />\n          </Route>\n          <Route exact path={routes.rules}>\n            <RulesView />\n          </Route>\n          <Route exact path={routes.categories}>\n            <CategoriesView />\n          </Route>\n          <Route exact path={routes.winner}>\n            <WinnerView gameStore={gameStore} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}