{"version":3,"sources":["views/main.vew.jsx","client/index.js","routes.js","views/new-game.vew.jsx","views/role-managing.view.jsx","views/game.view.jsx","stores/game.store.js","views/add-category.view.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MainView","props","mode","theme","menuItems","map","item","Item","to","path","name","id","getCategories","axios","get","then","data","body","saveCategory","category","a","categories","put","headers","uuid","e","console","error","routes","main","newGame","rules","roleManaging","game","addCategory","Option","Select","defaultSettings","playersCont","spyesCount","isTimerNeeded","timer","isFirstMemberChoiseNeeded","isRolesNeeded","isHelpQuestionsNeeded","NewGameView","gameSetting","usePromise","result","useState","gameSettings","setGameSettings","history","useHistory","handleChange","prop","value","labelCol","span","wrapperCol","layout","onFinish","gameStore","setGameOptions","push","label","min","defaultValue","onChange","disabled","checked","pathOr","selected","filter","Number","includes","htmlType","Meta","Card","alterIsOpened","curry","property","isOpened","items","pipe","when","propEq","assoc","observer","gameOptions","toJS","options","locations","option","flat","location","Math","round","random","length","arrayShuffle","repeat","propOr","type","cards","setCards","toggleOpened","find","card","removeCard","useEffect","style","width","onClick","title","description","GameView","useCountdownTimer","countdown","start","pause","isRunning","floor","GameStore","makeAutoObservable","this","alterValue","AddCategoryView","setLocations","setCategory","handleChangeLocationName","event","target","removeLocation","api","message","success","size","DeleteOutlined","App","className","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfe1144c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Menu } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainView = (props) => {\r\n  return (\r\n    <Menu mode=\"inline\" theme=\"dark\">\r\n      {props.menuItems.map((item) => (\r\n        <Menu.Item key={item.id}>\r\n          <Link to={item.path}>{item.name}</Link>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nMainView.propTypes = {\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default MainView;\r\n","import axios from 'axios';\r\nimport uuid from 'uuid-random';\r\n\r\nconst getCategories = () => {\r\n  return axios\r\n    .get('https://api.jsonbin.io/b/6041088b0866664b1088ad64/latest')\r\n    .then(({ data }) => data.body);\r\n};\r\n\r\nconst saveCategory = async (category) => {\r\n  const { categories } = await getCategories();\r\n  try {\r\n    axios.put('https://api.jsonbin.io/b/6041088b0866664b1088ad64', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Bin-Versioning': false,\r\n      },\r\n      body: {\r\n        categories: [\r\n          ...categories,\r\n          {\r\n            id: uuid(),\r\n            ...category,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nexport { getCategories, saveCategory };\r\n","const routes = {\r\n  main: '/',\r\n  newGame: '/new-game',\r\n  rules: '/rules',\r\n  roleManaging: '/role-managing',\r\n  game: '/game',\r\n  addCategory: '/add-category',\r\n};\r\n\r\nexport default routes;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Button, Select, InputNumber, Switch } from 'antd';\r\nimport usePromise from 'react-use-promise';\r\nimport { getCategories } from '../client';\r\nimport { pathOr } from 'ramda';\r\nimport { useHistory } from 'react-router-dom';\r\nimport routes from '../routes';\r\n\r\nconst { Option } = Select;\r\n\r\nconst defaultSettings = {\r\n  id: 1,\r\n  playersCont: 4,\r\n  spyesCount: 1,\r\n  isTimerNeeded: true,\r\n  timer: 5,\r\n  isFirstMemberChoiseNeeded: false,\r\n  isRolesNeeded: false,\r\n  categories: [],\r\n  isHelpQuestionsNeeded: false,\r\n};\r\n\r\nconst NewGameView = (props) => {\r\n  const [result] = usePromise(getCategories, []);\r\n  const [gameSettings, setGameSettings] = useState(defaultSettings);\r\n  const history = useHistory();\r\n  const setGame = (gameSetting) => () => {\r\n    props.gameStore.setGameOptions(gameSetting);\r\n    history.push(routes.roleManaging);\r\n  };\r\n  const handleChangeCategories = (categories) => (selected) => {\r\n    return setGameSettings(() => ({\r\n      ...gameSettings,\r\n      categories: categories.filter((category) => {\r\n        return selected.map(Number).includes(+category.id);\r\n      }),\r\n    }));\r\n  };\r\n  const handleChange = (prop) => (value) => {\r\n    setGameSettings(() => ({\r\n      ...gameSettings,\r\n      [prop]: value,\r\n    }));\r\n  };\r\n  return (\r\n    <Form\r\n      labelCol={{ span: 4 }}\r\n      wrapperCol={{ span: 14 }}\r\n      layout=\"horizontal\"\r\n      onFinish={setGame(gameSettings)}\r\n    >\r\n      <Form.Item label=\"Игроков\">\r\n        <InputNumber\r\n          min={3}\r\n          defaultValue={gameSettings.playersCont}\r\n          onChange={handleChange('playersCont')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Шпионов\">\r\n        <InputNumber\r\n          min={1}\r\n          defaultValue={gameSettings.spyesCount}\r\n          onChange={handleChange('spyesCount')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Продолжительность игры\">\r\n        <InputNumber\r\n          min={1}\r\n          defaultValue={gameSettings.timer}\r\n          onChange={handleChange('timer')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Использовать таймер\">\r\n        <Switch\r\n          disabled\r\n          checked={gameSettings.isTimerNeeded}\r\n          onChange={handleChange('isTimerNeeded')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Выбор первого игрока\">\r\n        <Switch\r\n          disabled\r\n          checked={gameSettings.isFirstMemberChoiseNeeded}\r\n          onChange={handleChange('isFirstMemberChoiseNeeded')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Использовать роли\">\r\n        <Switch\r\n          disabled\r\n          checked={gameSettings.isRolesNeeded}\r\n          onChange={handleChange('isRolesNeeded')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Категории\">\r\n        <Select\r\n          mode=\"multiple\"\r\n          onChange={handleChangeCategories(pathOr([], ['categories'], result))}\r\n        >\r\n          {pathOr([], ['categories'], result).map((category) => (\r\n            <Option key={category.id}>{category.name}</Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item label=\"Подсказывать вопросы\">\r\n        <Switch\r\n          disabled\r\n          checked={gameSettings.isHelpQuestionsNeeded}\r\n          onChange={handleChange('isHelpQuestionsNeeded')}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button htmlType=\"submit\">Начать игру</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nNewGameView.propTypes = {\r\n  categories: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default NewGameView;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card } from 'antd';\r\nimport {\r\n  assoc,\r\n  curry,\r\n  find,\r\n  map,\r\n  pathOr,\r\n  pipe,\r\n  prop,\r\n  propEq,\r\n  propOr,\r\n  repeat,\r\n  when,\r\n} from 'ramda';\r\nimport routes from '../routes';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport uuid from 'uuid-random';\r\nimport { toJS } from 'mobx';\r\nimport arrayShuffle from 'array-shuffle';\r\n\r\nconst { Meta, } = Card;\r\n\r\nconst alterIsOpened = curry((property, isOpened, id, items) =>\r\n  pipe(map(when(propEq('id', id), assoc(property, isOpened))))(items)\r\n);\r\n\r\nconst RoleManagingView = (props) => {\r\n  const gameOptions = toJS(props.gameStore.options);\r\n  const locations = gameOptions.categories\r\n    .map((option) => option.locations)\r\n    .flat();\r\n\r\n  const randomLocationIndex = Math.round(Math.random() * locations.length - 1);\r\n\r\n  const location = locations[randomLocationIndex];\r\n\r\n  const [cards, setCards,] = useState(\r\n    arrayShuffle([\r\n      ...repeat(null, gameOptions.playersCont - gameOptions.spyesCount).map(\r\n        () => {\r\n          return {\r\n            id: uuid(),\r\n            value: propOr('', 'name', location),\r\n            type: 'location',\r\n            isOpened: false,\r\n          };\r\n        }\r\n      ),\r\n      ...repeat(null, gameOptions.spyesCount).map(() => ({\r\n        id: uuid(),\r\n        type: 'spy',\r\n        isOpened: false,\r\n      })),\r\n    ])\r\n  );\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    toggleOpened(id);\r\n  };\r\n  const removeCard = (id) => {\r\n    return cards.filter((card) => card.id !== id);\r\n  };\r\n  const toggleOpened = (id) => {\r\n    if (pipe(find(propEq('id', id)), prop('isOpened'))(cards)) {\r\n      return setCards(() => removeCard(id));\r\n    }\r\n    return setCards(() =>\r\n      alterIsOpened(\r\n        'isOpened',\r\n        !cards.find((card) => card.id === id).isOpened,\r\n        id,\r\n        cards\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cards.length) {\r\n      history.push(routes.game);\r\n    }\r\n  }, [cards,]);\r\n\r\n  return (\r\n    <>\r\n      {cards.map((card) => (\r\n        <Card\r\n          key={card.id}\r\n          style={{ width: 300, }}\r\n          onClick={() => handleClick(card.id)}\r\n        >\r\n          {card.isOpened ? (\r\n            <Meta\r\n              title={card.type === 'location' ? card.value : 'Вы шпион'}\r\n              description=\"This is the description\"\r\n            />\r\n          ) : (\r\n            'Посмотри, что внутри'\r\n          )}\r\n        </Card>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nRoleManagingView.propTypes = {\r\n  cards: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default observer(RoleManagingView);\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { addMinutes, format, startOfHour, startOfMinute } from 'date-fns';\r\nimport { useCountdownTimer } from 'use-countdown-timer';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../routes';\r\nimport { PropTypes } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\n\r\nconst GameView = (props) => {\r\n  const gameStore = props.gameStore.options;\r\n  const { countdown, start, pause, isRunning, } = useCountdownTimer({\r\n    timer: 1000 * 60 * toJS(gameStore.timer),\r\n  });\r\n  return (\r\n    <>\r\n      {Math.floor((countdown % 36e5) / 6e4)} :{' '}\r\n      {Math.floor((countdown % 6e4) / 1000)}\r\n      <div>\r\n        <Button onClick={start} disabled={isRunning}>\r\n          Start\r\n        </Button>\r\n        <Button onClick={pause} disabled={!isRunning}>\r\n          Pause\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        <Button>\r\n          <Link to={routes.main}>End game</Link>\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGameView.propTypes = {\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default GameView;\r\n","import { makeAutoObservable } from 'mobx';\r\n\r\nclass GameStore {\r\n  options = {\r\n    id: 1,\r\n    playersCont: 4,\r\n    spyesCount: 1,\r\n    isTimerNeeded: true,\r\n    timer: 5,\r\n    isFirstMemberChoiseNeeded: false,\r\n    isRolesNeeded: false,\r\n    categories: [],\r\n    isHelpQuestionsNeeded: false,\r\n  };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setGameOptions(gameOptions) {\r\n    this.options = gameOptions;\r\n  }\r\n}\r\n\r\nexport default GameStore;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Input, message } from 'antd';\r\nimport uuid from 'uuid-random';\r\nimport { assoc, curry, map, pipe, propEq, when } from 'ramda';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport * as api from '../client';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../routes';\r\n\r\nconst alterValue = curry((property, value, id, items) =>\r\n  pipe(map(when(propEq('id', id), assoc(property, value))))(items)\r\n);\r\n\r\nconst AddCategoryView = () => {\r\n  const [locations, setLocations] = useState([{ id: uuid(), name: '' }]);\r\n  const [category, setCategory] = useState({ name: '' });\r\n\r\n  const addLocation = () =>\r\n    setLocations([...locations, { id: uuid(), name: '' }]);\r\n\r\n  const handleChangeName = (event) =>\r\n    setCategory({\r\n      name: event.target.value,\r\n    });\r\n  const handleChangeLocationName = (id) => (event) => {\r\n    setLocations(alterValue('name', event.target.value, id, locations));\r\n  };\r\n\r\n  const removeLocation = (id) => () =>\r\n    setLocations(locations.filter((location) => location.id !== id));\r\n\r\n  const saveCategory = async () => {\r\n    try {\r\n      await api.saveCategory({ name: category.name, locations });\r\n      message.success('Категория успешно добавлена');\r\n    } catch (e) {\r\n      console.error('Error is', e);\r\n      message.error('Категория не добавлена');\r\n    }\r\n  };\r\n  return (\r\n    <Form\r\n      labelCol={{ span: 4 }}\r\n      wrapperCol={{ span: 14 }}\r\n      layout=\"horizontal\"\r\n      onFinish={saveCategory}\r\n    >\r\n      <Form.Item label=\"Название\">\r\n        <Input onChange={handleChangeName} />\r\n      </Form.Item>\r\n      <Form.Item label=\"Локации\">\r\n        {locations.map(({ id, name }) => (\r\n          <Form.Item key={id}>\r\n            <Input onChange={handleChangeLocationName(id)} value={name} />\r\n            {locations.length > 1 && (\r\n              <Button size=\"small\" onClick={removeLocation(id)}>\r\n                <DeleteOutlined />\r\n              </Button>\r\n            )}\r\n          </Form.Item>\r\n        ))}\r\n      </Form.Item>\r\n      <Button type=\"text\" onClick={addLocation}>\r\n        Добавить локацию\r\n      </Button>\r\n      <Form.Item>\r\n        <Button htmlType=\"submit\">Добавить категорию</Button>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"link\">\r\n          <Link to={routes.main}>Назад</Link>\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCategoryView;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport MainView from './views/main.vew';\r\nimport NewGameView from './views/new-game.vew';\r\nimport RoleManagingView from './views/role-managing.view';\r\nimport routes from './routes';\r\nimport GameView from './views/game.view';\r\nimport GameStore from './stores/game.store';\r\nimport AddCategoryView from './views/add-category.view';\r\n\r\nconst gameStore = new GameStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={routes.main}>\r\n            <MainView\r\n              menuItems={[\r\n                { id: 1, name: 'Новая игра', path: routes.newGame, },\r\n                { id: 2, name: 'Правила', path: routes.rules, },\r\n                {\r\n                  id: 3,\r\n                  name: 'Добавить новую категорию',\r\n                  path: routes.addCategory,\r\n                },\r\n              ]}\r\n            />\r\n          </Route>\r\n          <Route exact path={routes.newGame}>\r\n            <NewGameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.roleManaging}>\r\n            <RoleManagingView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.game}>\r\n            <GameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.addCategory}>\r\n            <AddCategoryView />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}