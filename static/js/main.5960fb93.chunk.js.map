{"version":3,"sources":["views/main.vew.jsx","client/index.js","routes.js","views/new-game.vew.jsx","views/role-managing.view.jsx","views/game.view.jsx","stores/game.store.js","views/add-category.view.jsx","components/Category.jsx","views/categories/categories.view.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["MainView","props","mode","className","menuItems","map","item","Item","to","path","name","id","getCategories","axios","get","then","data","body","saveCategory","category","a","categories","put","headers","uuid","e","console","error","routes","main","newGame","rules","roleManaging","game","addCategory","Option","Select","defaultSettings","playersCont","spyesCount","isTimerNeeded","timer","isFirstMemberChoiseNeeded","isRolesNeeded","isHelpQuestionsNeeded","NewGameView","gameSetting","usePromise","result","useState","gameSettings","setGameSettings","history","useHistory","handleChange","prop","value","isSubmitDisabled","useMemo","length","layout","onFinish","gameStore","setGameOptions","push","label","min","defaultValue","onChange","disabled","checked","required","pathOr","selected","filter","includes","htmlType","Meta","Card","alterIsOpened","curry","property","isOpened","items","pipe","when","propEq","assoc","observer","gameOptions","toJS","options","log","locations","option","flat","location","Math","round","random","arrayShuffle","repeat","propOr","type","description","cards","setCards","toggleOpened","find","card","removeCard","useEffect","cardTheme","useCallback","classNames","onClick","title","GameView","useCountdownTimer","countdown","start","pause","isRunning","floor","toString","padStart","GameStore","makeAutoObservable","this","spy","alterValue","AddCategoryView","setLocations","setCategory","handleChangeLocationName","event","target","removeLocation","api","message","success","labelCol","span","wrapperCol","size","DeleteOutlined","Category","header","place","editable","CategoriesView","React","setCategories","LeftOutlined","LoadingOutlined","style","fontSize","spin","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5960fb93.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Menu } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainView = (props) => {\r\n  return (\r\n    <Menu mode=\"inline\" className=\"main-view\">\r\n      {props.menuItems.map((item) => (\r\n        <Menu.Item key={item.id}>\r\n          <Link to={item.path}>{item.name}</Link>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nMainView.propTypes = {\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default MainView;\r\n","import axios from 'axios';\r\nimport uuid from 'uuid-random';\r\n\r\nconst getCategories = () => {\r\n  return axios\r\n    .get('https://api.jsonbin.io/b/6041088b0866664b1088ad64/latest')\r\n    .then(({ data }) => data.body);\r\n};\r\n\r\nconst saveCategory = async (category) => {\r\n  const { categories } = await getCategories();\r\n  try {\r\n    axios.put('https://api.jsonbin.io/b/6041088b0866664b1088ad64', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Bin-Versioning': false,\r\n      },\r\n      body: {\r\n        categories: [\r\n          ...categories,\r\n          {\r\n            id: uuid(),\r\n            ...category,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nexport { getCategories, saveCategory };\r\n","const routes = {\r\n  main: '/',\r\n  newGame: '/new-game',\r\n  rules: '/rules',\r\n  roleManaging: '/role-managing',\r\n  game: '/game',\r\n  addCategory: '/add-category',\r\n  categories: '/categories',\r\n};\r\n\r\nexport default routes;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Button, Select, InputNumber, Switch } from \"antd\";\r\nimport usePromise from \"react-use-promise\";\r\nimport { getCategories } from \"../client\";\r\nimport { pathOr } from \"ramda\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst defaultSettings = {\r\n  id: 1,\r\n  playersCont: 4,\r\n  spyesCount: 1,\r\n  isTimerNeeded: true,\r\n  timer: 5,\r\n  isFirstMemberChoiseNeeded: false,\r\n  isRolesNeeded: false,\r\n  categories: [],\r\n  isHelpQuestionsNeeded: false,\r\n};\r\n\r\nconst NewGameView = (props) => {\r\n  const [result] = usePromise(getCategories, []);\r\n  const [gameSettings, setGameSettings] = useState(defaultSettings);\r\n  const history = useHistory();\r\n  const setGame = (gameSetting) => () => {\r\n    props.gameStore.setGameOptions(gameSetting);\r\n    history.push(routes.roleManaging);\r\n  };\r\n  const handleChangeCategories = (categories) => (selected) => {\r\n    return setGameSettings(() => ({\r\n      ...gameSettings,\r\n      categories: categories.filter((category) =>\r\n        selected.includes(category.id)\r\n      ),\r\n    }));\r\n  };\r\n  const handleChange = (prop) => (value) => {\r\n    setGameSettings(() => ({\r\n      ...gameSettings,\r\n      [prop]: value,\r\n    }));\r\n  };\r\n\r\n  const isSubmitDisabled = useMemo(() => !gameSettings.categories.length, [\r\n    gameSettings.categories,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <h1>Новая игра</h1>\r\n      <Form layout=\"horizontal\" onFinish={setGame(gameSettings)}>\r\n        <Form.Item label=\"Игроков\">\r\n          <InputNumber\r\n            min={3}\r\n            defaultValue={gameSettings.playersCont}\r\n            onChange={handleChange(\"playersCont\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Шпионов\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.spyesCount}\r\n            onChange={handleChange(\"spyesCount\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Продолжительность игры\">\r\n          <InputNumber\r\n            min={1}\r\n            defaultValue={gameSettings.timer}\r\n            onChange={handleChange(\"timer\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать таймер\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isTimerNeeded}\r\n            onChange={handleChange(\"isTimerNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Выбор первого игрока\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isFirstMemberChoiseNeeded}\r\n            onChange={handleChange(\"isFirstMemberChoiseNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Использовать роли\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isRolesNeeded}\r\n            onChange={handleChange(\"isRolesNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"Категории\" required>\r\n          <Select\r\n            mode=\"multiple\"\r\n            onChange={handleChangeCategories(\r\n              pathOr([], [\"categories\"], result)\r\n            )}\r\n            className=\"new-game__selector\"\r\n          >\r\n            {pathOr([], [\"categories\"], result).map((category) => (\r\n              <Option key={category.id}>{category.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Подсказывать вопросы\">\r\n          <Switch\r\n            disabled\r\n            checked={gameSettings.isHelpQuestionsNeeded}\r\n            onChange={handleChange(\"isHelpQuestionsNeeded\")}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Button\r\n            htmlType=\"submit\"\r\n            className=\"new-game__submit\"\r\n            disabled={isSubmitDisabled}\r\n          >\r\n            Начать игру\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nNewGameView.propTypes = {\r\n  categories: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default NewGameView;\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card } from \"antd\";\r\nimport {\r\n  assoc,\r\n  curry,\r\n  find,\r\n  map,\r\n  pathOr,\r\n  pipe,\r\n  prop,\r\n  propEq,\r\n  propOr,\r\n  repeat,\r\n  when,\r\n} from \"ramda\";\r\nimport routes from \"../routes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react\";\r\nimport uuid from \"uuid-random\";\r\nimport { toJS } from \"mobx\";\r\nimport arrayShuffle from \"array-shuffle\";\r\nimport classNames from \"classnames\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst alterIsOpened = curry((property, isOpened, id, items) =>\r\n  pipe(map(when(propEq(\"id\", id), assoc(property, isOpened))))(items)\r\n);\r\n\r\nconst RoleManagingView = (props) => {\r\n  const gameOptions = toJS(props.gameStore.options);\r\n  console.log(gameOptions);\r\n  const locations = gameOptions.categories\r\n    .map((option) => option.locations)\r\n    .flat();\r\n\r\n  const randomLocationIndex = Math.round(Math.random() * locations.length - 1);\r\n\r\n  const location = locations[randomLocationIndex];\r\n  const [cards, setCards] = useState(\r\n    arrayShuffle([\r\n      ...repeat(null, gameOptions.playersCont - gameOptions.spyesCount).map(\r\n        () => {\r\n          return {\r\n            id: uuid(),\r\n            value: propOr(\"\", \"name\", location),\r\n            type: \"location\",\r\n            description: pathOr(\r\n              \"Default description\",\r\n              [\"description\", \"location\"],\r\n              gameOptions\r\n            ),\r\n            isOpened: false,\r\n          };\r\n        }\r\n      ),\r\n      ...repeat(null, gameOptions.spyesCount).map(() => ({\r\n        id: uuid(),\r\n        type: \"spy\",\r\n        description: pathOr(\r\n          \"Default description\",\r\n          [\"description\", \"spy\"],\r\n          gameOptions\r\n        ),\r\n        isOpened: false,\r\n      })),\r\n    ])\r\n  );\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    toggleOpened(id);\r\n  };\r\n  const removeCard = (id) => {\r\n    return cards.filter((card) => card.id !== id);\r\n  };\r\n  const toggleOpened = (id) => {\r\n    if (pipe(find(propEq(\"id\", id)), prop(\"isOpened\"))(cards)) {\r\n      return setCards(() => removeCard(id));\r\n    }\r\n    return setCards(() =>\r\n      alterIsOpened(\r\n        \"isOpened\",\r\n        !cards.find((card) => card.id === id).isOpened,\r\n        id,\r\n        cards\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cards.length) {\r\n      history.push(routes.game);\r\n    }\r\n  }, [cards]);\r\n\r\n  const cardTheme = useCallback(\r\n    (isOpened) =>\r\n      classNames(\r\n        \"role-managing__card\",\r\n        isOpened ? \"role-managing__card--opened\" : \"\"\r\n      ),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {cards.map((card) => {\r\n        console.log(card);\r\n        return (\r\n          <Card\r\n            key={card.id}\r\n            onClick={() => handleClick(card.id)}\r\n            className={cardTheme(card.isOpened)}\r\n          >\r\n            {card.isOpened ? (\r\n              <Meta\r\n                title={card.type === \"location\" ? card.value : \"Вы шпион\"}\r\n                description={card.description}\r\n                className=\"role-managing__meta\"\r\n              />\r\n            ) : (\r\n              \"Посмотри, что внутри\"\r\n            )}\r\n          </Card>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nRoleManagingView.propTypes = {\r\n  cards: PropTypes.array,\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default observer(RoleManagingView);\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { addMinutes, format, startOfHour, startOfMinute } from \"date-fns\";\r\nimport { useCountdownTimer } from \"use-countdown-timer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport routes from \"../routes\";\r\nimport { PropTypes } from \"mobx-react\";\r\nimport { toJS } from \"mobx\";\r\n\r\nconst GameView = (props) => {\r\n  const gameStore = props.gameStore.options;\r\n  const { countdown, start, pause, isRunning } = useCountdownTimer({\r\n    timer: 1000 * 60 * toJS(gameStore.timer),\r\n  });\r\n  return (\r\n    <div className=\"df fdc\">\r\n      <span className=\"game__counter\">\r\n        {Math.floor((countdown % 36e5) / 6e4)\r\n          .toString()\r\n          .padStart(2, \"0\")}{\" \"}\r\n        :{\" \"}\r\n        {Math.floor((countdown % 6e4) / 1000)\r\n          .toString()\r\n          .padStart(2, \"0\")}\r\n      </span>\r\n      <div>\r\n        {isRunning ? (\r\n          <Button onClick={pause}>Pause</Button>\r\n        ) : (\r\n          <Button onClick={start}>Start</Button>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <Button>\r\n          <Link to={routes.main}>End game</Link>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameView.propTypes = {\r\n  gameStore: PropTypes.object,\r\n};\r\n\r\nexport default GameView;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass GameStore {\r\n  options = {\r\n    id: 1,\r\n    playersCont: 4,\r\n    spyesCount: 1,\r\n    isTimerNeeded: true,\r\n    timer: 5,\r\n    isFirstMemberChoiseNeeded: false,\r\n    isRolesNeeded: false,\r\n    categories: [],\r\n    isHelpQuestionsNeeded: false,\r\n  };\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setGameOptions(gameOptions) {\r\n    this.options = {\r\n      ...gameOptions,\r\n      description: {\r\n        location:\r\n          \"Вы мирный житель. Ваша цель - вычислить шпиона и убрать его путем голосования\",\r\n        spy:\r\n          \"Вы шпион. Ваша цель - угадать локацию или не дать понять другим участникам, что вы ее не знаете\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport default GameStore;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Input, message } from 'antd';\r\nimport uuid from 'uuid-random';\r\nimport { assoc, curry, map, pipe, propEq, when } from 'ramda';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport * as api from '../client';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../routes';\r\n\r\nconst alterValue = curry((property, value, id, items) =>\r\n  pipe(map(when(propEq('id', id), assoc(property, value))))(items)\r\n);\r\n\r\nconst AddCategoryView = () => {\r\n  const [locations, setLocations] = useState([{ id: uuid(), name: '' }]);\r\n  const [category, setCategory] = useState({ name: '' });\r\n\r\n  const addLocation = () =>\r\n    setLocations([...locations, { id: uuid(), name: '' }]);\r\n\r\n  const handleChangeName = (event) =>\r\n    setCategory({\r\n      name: event.target.value,\r\n    });\r\n  const handleChangeLocationName = (id) => (event) => {\r\n    setLocations(alterValue('name', event.target.value, id, locations));\r\n  };\r\n\r\n  const removeLocation = (id) => () =>\r\n    setLocations(locations.filter((location) => location.id !== id));\r\n\r\n  const saveCategory = async () => {\r\n    try {\r\n      await api.saveCategory({ name: category.name, locations });\r\n      message.success('Категория успешно добавлена');\r\n    } catch (e) {\r\n      console.error('Error is', e);\r\n      message.error('Категория не добавлена');\r\n    }\r\n  };\r\n  return (\r\n    <Form\r\n      labelCol={{ span: 4 }}\r\n      wrapperCol={{ span: 14 }}\r\n      layout=\"horizontal\"\r\n      onFinish={saveCategory}\r\n    >\r\n      <Form.Item label=\"Название\">\r\n        <Input onChange={handleChangeName} />\r\n      </Form.Item>\r\n      <Form.Item label=\"Локации\">\r\n        {locations.map(({ id, name }) => (\r\n          <Form.Item key={id}>\r\n            <Input onChange={handleChangeLocationName(id)} value={name} />\r\n            {locations.length > 1 && (\r\n              <Button size=\"small\" onClick={removeLocation(id)}>\r\n                <DeleteOutlined />\r\n              </Button>\r\n            )}\r\n          </Form.Item>\r\n        ))}\r\n      </Form.Item>\r\n      <Button type=\"text\" onClick={addLocation}>\r\n        Добавить локацию\r\n      </Button>\r\n      <Form.Item>\r\n        <Button htmlType=\"submit\">Добавить категорию</Button>\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"link\">\r\n          <Link to={routes.main}>Назад</Link>\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddCategoryView;\r\n","import { Divider, List } from 'antd';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport { PropTypes } from 'mobx-react';\r\nimport * as React from 'react';\r\n\r\nexport const Category = (props) => {\r\n  const { locations, name, } = props;\r\n  return (\r\n    <div className=\"category\">\r\n      <List header={<Divider>{name}</Divider>}>\r\n        {locations.map((place) => (\r\n          <List.Item key={place.id}>\r\n            <Paragraph editable={{ onChange: console.log, }}>\r\n              {place.name}\r\n            </Paragraph>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nCategory.propTypes = {\r\n  locations: PropTypes.array,\r\n  name: PropTypes.string,\r\n};\r\n","import { LeftOutlined, LoadingOutlined } from '@ant-design/icons';\r\nimport { Button, List } from 'antd';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCategories } from '../../client';\r\nimport { Category } from '../../components/Category';\r\nimport routes from '../../routes';\r\n\r\nimport './style.css';\r\n\r\nexport const CategoriesView = () => {\r\n  const [categories, setCategories] = React.useState([]);\r\n  React.useEffect(async () => {\r\n    const { categories } = await getCategories();\r\n    setCategories(categories);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"df aic jcsb\">\r\n        <Button type=\"link\">\r\n          <Link to={routes.main}>\r\n            <LeftOutlined />\r\n          </Link>\r\n        </Button>\r\n        <h1>Список категорий</h1>\r\n      </div>\r\n      <List className=\"categories__list\">\r\n        {categories.length ? (\r\n          categories.map((category) => (\r\n            <List.Item key={category.id}>\r\n              <Category {...category} />\r\n            </List.Item>\r\n          ))\r\n        ) : (\r\n          <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport MainView from './views/main.vew';\r\nimport NewGameView from './views/new-game.vew';\r\nimport RoleManagingView from './views/role-managing.view';\r\nimport routes from './routes';\r\nimport GameView from './views/game.view';\r\nimport GameStore from './stores/game.store';\r\nimport AddCategoryView from './views/add-category.view';\r\nimport { CategoriesView } from './views/categories/categories.view';\r\n\r\nconst gameStore = new GameStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={routes.main}>\r\n            <MainView\r\n              menuItems={[\r\n                { id: 1, name: 'Новая игра', path: routes.newGame, },\r\n                { id: 2, name: 'Правила', path: routes.rules, },\r\n                {\r\n                  id: 3,\r\n                  name: 'Добавить новую категорию',\r\n                  path: routes.addCategory,\r\n                },\r\n                {\r\n                  id: 4,\r\n                  name: 'Список категорий',\r\n                  path: routes.categories,\r\n                },\r\n              ]}\r\n            />\r\n          </Route>\r\n          <Route exact path={routes.newGame}>\r\n            <NewGameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.roleManaging}>\r\n            <RoleManagingView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.game}>\r\n            <GameView gameStore={gameStore} />\r\n          </Route>\r\n          <Route exact path={routes.addCategory}>\r\n            <AddCategoryView />\r\n          </Route>\r\n          <Route exact path={routes.categories}>\r\n            <CategoriesView />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}